{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vaish\\\\OneDrive\\\\Desktop\\\\Notes_world\\\\educational-website\\\\client\\\\src\\\\components\\\\AdminPanel.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n\n// const AdminPanel = () => {\n//   const navigate = useNavigate();\n//   const [users, setUsers] = useState([]);\n//   const [notes, setNotes] = useState([]);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     const userRole = localStorage.getItem(\"role\");\n//     const token = localStorage.getItem(\"token\");\n\n//     if (!userRole || userRole !== \"admin\" || !token) {\n//       navigate(\"/login\");\n//       return;\n//     }\n\n//     fetchUsers(token);\n//     fetchNotes(token);\n//   }, [navigate]);\n\n//   const fetchUsers = async (token) => {\n//     try {\n//       const response = await fetch(\"http://localhost:5000/api/users\", {\n//         headers: { Authorization: `Bearer ${token}` },\n//       });\n\n//       if (!response.ok) throw new Error(\"Failed to fetch users\");\n\n//       const data = await response.json();\n//       setUsers(data);\n//     } catch (error) {\n//       console.error(\"Error fetching users:\", error);\n//     }\n//   };\n\n//   const fetchNotes = async (token) => {\n//     try {\n//       const response = await fetch(\"http://localhost:5000/api/notes\", {\n//         headers: { Authorization: `Bearer ${token}` },\n//       });\n\n//       if (!response.ok) throw new Error(\"Failed to fetch notes\");\n\n//       const data = await response.json();\n//       setNotes(data);\n//     } catch (error) {\n//       console.error(\"Error fetching notes:\", error);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const changeRole = async (userId) => {\n//     try {\n//       const token = localStorage.getItem(\"token\");\n\n//       const response = await fetch(`http://localhost:5000/api/promote/${userId}`, {\n//         method: \"PUT\",\n//         headers: { \"Content-Type\": \"application/json\", Authorization: `Bearer ${token}` },\n//         body: JSON.stringify({ role: \"admin\" }),\n//       });\n\n//       if (!response.ok) throw new Error(\"Failed to update role\");\n\n//       fetchUsers(token);\n//     } catch (error) {\n//       console.error(\"Failed to update role:\", error);\n//     }\n//   };\n\n//   // const deleteUser = async (userId) => {\n//   //   try {\n//   //     const token = localStorage.getItem(\"token\");\n\n//   //     const response = await fetch(`http://localhost:5000/api/delete/${userId}`, {\n//   //       method: \"DELETE\",\n//   //       headers: { Authorization: `Bearer ${token}` },\n//   //     });\n\n//   //     if (!response.ok) throw new Error(\"Failed to delete user\");\n\n//   //     fetchUsers(token);\n//   //   } catch (error) {\n//   //     console.error(\"Failed to delete user:\", error);\n//   //   }\n//   // };\n//   const deleteUser = async (userId) => {\n//     try {\n//       const token = localStorage.getItem(\"token\");\n\n//       if (!token) {\n//         console.error(\"‚ùå No token found. User might not be logged in.\");\n//         return;\n//       }\n\n//       console.log(`üîπ Sending DELETE request for user ID: ${userId}`);\n\n//       const response = await fetch(`http://localhost:5000/api/users/${userId}`, {\n//         method: \"DELETE\",\n//         headers: {\n//           Authorization: `Bearer ${token}`,\n//           \"Content-Type\": \"application/json\",\n//         },\n//       });\n\n//       const data = await response.json();\n//       console.log(\"üîπ API Response:\", data);\n\n//       if (!response.ok) {\n//         throw new Error(data.message || \"Failed to delete user\");\n//       }\n\n//       console.log(\"‚úÖ User deleted successfully.\");\n//       fetchUsers(); // Refresh user list\n//     } catch (error) {\n//       console.error(\"‚ùå Failed to delete user:\", error);\n//     }\n// };\n\n//   const deleteNote = async (noteId) => {\n//     try {\n//       const token = localStorage.getItem(\"token\");\n\n//       const response = await fetch(`http://localhost:5000/api/notes/${noteId}`, {\n//         method: \"DELETE\",\n//         headers: { Authorization: `Bearer ${token}` },\n//       });\n\n//       if (!response.ok) throw new Error(\"Failed to delete note\");\n\n//       fetchNotes(token);\n//     } catch (error) {\n//       console.error(\"Error deleting note:\", error);\n//     }\n//   };\n\n//   if (loading) return <p>Loading...</p>;\n\n//   return (\n//     <div>\n//       <h2>Admin Panel</h2>\n\n//       {/* User Management */}\n//       <h3>User Management</h3>\n//       <table border=\"1\">\n//         <thead>\n//           <tr>\n//             <th>Username</th>\n//             <th>Email</th>\n//             <th>Role</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {users.map((user) => (\n//             <tr key={user._id}>\n//               <td>{user.username}</td>\n//               <td>{user.email}</td>\n//               <td>{user.role}</td>\n//               <td>\n//                 {user.role !== \"admin\" && (\n//                   <button onClick={() => changeRole(user._id)}>Promote to Admin</button>\n//                 )}\n//                 <button onClick={() => deleteUser(user._id)} style={{ marginLeft: \"10px\" }}>\n//                   Delete\n//                 </button>\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n\n//       {/* Notes Management */}\n//       <h3>Notes Management</h3>\n//       <button onClick={() => navigate(\"/admin/add-note\")}>‚ûï Add New Note</button>\n//       <table border=\"1\" style={{ marginTop: \"10px\", width: \"100%\" }}>\n//         <thead>\n//           <tr>\n//             <th>Title</th>\n//             <th>Content</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {notes.length === 0 ? (\n//             <tr>\n//               <td colSpan=\"3\">No notes available.</td>\n//             </tr>\n//           ) : (\n//             notes.map((note) => (\n//               <tr key={note._id}>\n//                 <td>{note.title}</td>\n//                 <td>{note.content}</td>\n//                 <td>\n//                   <button onClick={() => deleteNote(note._id)} style={{ marginLeft: \"10px\" }}>\n//                     üóëÔ∏è Delete\n//                   </button>\n//                 </td>\n//               </tr>\n//             ))\n//           )}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default AdminPanel;\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AdminPanel = () => {\n  _s();\n  const navigate = useNavigate();\n  const [users, setUsers] = useState([]);\n  const [notes, setNotes] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [noteTitle, setNoteTitle] = useState(\"\");\n  const [noteContent, setNoteContent] = useState(\"\");\n  const [editNoteId, setEditNoteId] = useState(null);\n  const [activeTab, setActiveTab] = useState(\"users\"); // Tab control\n\n  useEffect(() => {\n    const userRole = localStorage.getItem(\"role\");\n    const token = localStorage.getItem(\"token\");\n    if (!userRole || userRole !== \"admin\" || !token) {\n      navigate(\"/login\");\n      return;\n    }\n    fetchData(token);\n  }, [navigate]);\n  const fetchData = async token => {\n    try {\n      const [usersRes, notesRes] = await Promise.all([fetch(\"http://localhost:5000/api/users\", {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      }), fetch(\"http://localhost:5000/api/notes\", {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      })]);\n      if (!usersRes.ok || !notesRes.ok) throw new Error(\"Failed to fetch data\");\n      setUsers(await usersRes.json());\n      setNotes(await notesRes.json());\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const changeRole = async (userId, newRole) => {\n    try {\n      const token = localStorage.getItem(\"token\");\n      const response = await fetch(`http://localhost:5000/api/users/${userId}/role`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          role: newRole\n        })\n      });\n      if (!response.ok) throw new Error(\"Failed to update role\");\n      fetchData(token);\n    } catch (error) {\n      console.error(\"Error updating user role:\", error);\n    }\n  };\n  const deleteUser = async userId => {\n    if (!window.confirm(\"Are you sure you want to delete this user?\")) return;\n    try {\n      const token = localStorage.getItem(\"token\");\n      const response = await fetch(`http://localhost:5000/api/users/${userId}`, {\n        method: \"DELETE\",\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (!response.ok) throw new Error(\"Failed to delete user\");\n      fetchData(token);\n    } catch (error) {\n      console.error(\"Error deleting user:\", error);\n    }\n  };\n  const deleteNote = async noteId => {\n    if (!window.confirm(\"Are you sure you want to delete this note?\")) return;\n    try {\n      const token = localStorage.getItem(\"token\");\n      const response = await fetch(`http://localhost:5000/api/notes/${noteId}`, {\n        method: \"DELETE\",\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (!response.ok) throw new Error(\"Failed to delete note\");\n      fetchData(token);\n    } catch (error) {\n      console.error(\"Error deleting note:\", error);\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const token = localStorage.getItem(\"token\");\n    if (!noteTitle || !noteContent) {\n      alert(\"Title and Content are required!\");\n      return;\n    }\n    try {\n      let url = \"http://localhost:5000/api/notes\";\n      let method = \"POST\";\n      let body = {\n        title: noteTitle,\n        content: noteContent\n      };\n      if (editNoteId) {\n        url = `http://localhost:5000/api/notes/${editNoteId}`;\n        method = \"PUT\";\n      }\n      const response = await fetch(url, {\n        method,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`\n        },\n        body: JSON.stringify(body)\n      });\n      if (!response.ok) throw new Error(\"Failed to save note\");\n      setNoteTitle(\"\");\n      setNoteContent(\"\");\n      setEditNoteId(null);\n      fetchData(token);\n    } catch (error) {\n      console.error(\"Error saving note:\", error);\n    }\n  };\n  const handleEdit = note => {\n    setNoteTitle(note.title);\n    setNoteContent(note.content);\n    setEditNoteId(note._id);\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 361,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Admin Panel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setActiveTab(\"users\"),\n        children: \"User Management\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setActiveTab(\"notes\"),\n        children: \"Notes Management\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 7\n    }, this), activeTab === \"users\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"User Management\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        border: \"1\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 380,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 381,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Role\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 382,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Actions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 383,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 379,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: users.length === 0 ? /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: /*#__PURE__*/_jsxDEV(\"td\", {\n              colSpan: \"4\",\n              children: \"No users found.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 389,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 17\n          }, this) : users.map(user => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: user.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 394,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: user.email\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 395,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: user.role\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 396,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [user.role === \"admin\" ? /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => changeRole(user._id, \"user\"),\n                children: \"Revoke Admin\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 399,\n                columnNumber: 25\n              }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => changeRole(user._id, \"admin\"),\n                children: \"Make Admin\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 401,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => deleteUser(user._id),\n                children: \"\\uD83D\\uDDD1\\uFE0F Delete\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 403,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 397,\n              columnNumber: 21\n            }, this)]\n          }, user._id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 393,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 9\n    }, this), activeTab === \"notes\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: editNoteId ? \"Edit Note\" : \"Add New Note\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Note Title\",\n          value: noteTitle,\n          onChange: e => setNoteTitle(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          placeholder: \"Note Content\",\n          value: noteContent,\n          onChange: e => setNoteContent(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 425,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: editNoteId ? \"Update Note\" : \"Add Note\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 13\n        }, this), editNoteId && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            setEditNoteId(null);\n            setNoteTitle(\"\");\n            setNoteContent(\"\");\n          },\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 433,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Notes Management\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        border: \"1\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Title\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 443,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Content\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 444,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Actions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 445,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 442,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 441,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: notes.length === 0 ? /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: /*#__PURE__*/_jsxDEV(\"td\", {\n              colSpan: \"3\",\n              children: \"No notes available.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 451,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 450,\n            columnNumber: 17\n          }, this) : notes.map(note => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: note.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 456,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: note.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 457,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleEdit(note),\n                children: \"\\u270F\\uFE0F Edit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 459,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => deleteNote(note._id),\n                children: \"\\uD83D\\uDDD1\\uFE0F Delete\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 460,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 458,\n              columnNumber: 21\n            }, this)]\n          }, note._id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 455,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 448,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 364,\n    columnNumber: 5\n  }, this);\n};\n_s(AdminPanel, \"42QxRm86G+QO5UDCqlx0+JgInhA=\", false, function () {\n  return [useNavigate];\n});\n_c = AdminPanel;\nexport default AdminPanel;\nvar _c;\n$RefreshReg$(_c, \"AdminPanel\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","jsxDEV","_jsxDEV","AdminPanel","_s","navigate","users","setUsers","notes","setNotes","loading","setLoading","noteTitle","setNoteTitle","noteContent","setNoteContent","editNoteId","setEditNoteId","activeTab","setActiveTab","userRole","localStorage","getItem","token","fetchData","usersRes","notesRes","Promise","all","fetch","headers","Authorization","ok","Error","json","error","console","changeRole","userId","newRole","response","method","body","JSON","stringify","role","deleteUser","window","confirm","deleteNote","noteId","handleSubmit","e","preventDefault","alert","url","title","content","handleEdit","note","_id","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","border","length","colSpan","map","user","name","email","onSubmit","type","placeholder","value","onChange","target","required","_c","$RefreshReg$"],"sources":["C:/Users/vaish/OneDrive/Desktop/Notes_world/educational-website/client/src/components/AdminPanel.js"],"sourcesContent":["\r\n// import React, { useEffect, useState } from \"react\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n\r\n// const AdminPanel = () => {\r\n//   const navigate = useNavigate();\r\n//   const [users, setUsers] = useState([]);\r\n//   const [notes, setNotes] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n\r\n//   useEffect(() => {\r\n//     const userRole = localStorage.getItem(\"role\");\r\n//     const token = localStorage.getItem(\"token\");\r\n\r\n//     if (!userRole || userRole !== \"admin\" || !token) {\r\n//       navigate(\"/login\");\r\n//       return;\r\n//     }\r\n\r\n//     fetchUsers(token);\r\n//     fetchNotes(token);\r\n//   }, [navigate]);\r\n\r\n//   const fetchUsers = async (token) => {\r\n//     try {\r\n//       const response = await fetch(\"http://localhost:5000/api/users\", {\r\n//         headers: { Authorization: `Bearer ${token}` },\r\n//       });\r\n\r\n//       if (!response.ok) throw new Error(\"Failed to fetch users\");\r\n\r\n//       const data = await response.json();\r\n//       setUsers(data);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching users:\", error);\r\n//     }\r\n//   };\r\n\r\n//   const fetchNotes = async (token) => {\r\n//     try {\r\n//       const response = await fetch(\"http://localhost:5000/api/notes\", {\r\n//         headers: { Authorization: `Bearer ${token}` },\r\n//       });\r\n\r\n//       if (!response.ok) throw new Error(\"Failed to fetch notes\");\r\n\r\n//       const data = await response.json();\r\n//       setNotes(data);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching notes:\", error);\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   const changeRole = async (userId) => {\r\n//     try {\r\n//       const token = localStorage.getItem(\"token\");\r\n\r\n//       const response = await fetch(`http://localhost:5000/api/promote/${userId}`, {\r\n//         method: \"PUT\",\r\n//         headers: { \"Content-Type\": \"application/json\", Authorization: `Bearer ${token}` },\r\n//         body: JSON.stringify({ role: \"admin\" }),\r\n//       });\r\n\r\n//       if (!response.ok) throw new Error(\"Failed to update role\");\r\n\r\n//       fetchUsers(token);\r\n//     } catch (error) {\r\n//       console.error(\"Failed to update role:\", error);\r\n//     }\r\n//   };\r\n\r\n//   // const deleteUser = async (userId) => {\r\n//   //   try {\r\n//   //     const token = localStorage.getItem(\"token\");\r\n\r\n//   //     const response = await fetch(`http://localhost:5000/api/delete/${userId}`, {\r\n//   //       method: \"DELETE\",\r\n//   //       headers: { Authorization: `Bearer ${token}` },\r\n//   //     });\r\n\r\n//   //     if (!response.ok) throw new Error(\"Failed to delete user\");\r\n\r\n//   //     fetchUsers(token);\r\n//   //   } catch (error) {\r\n//   //     console.error(\"Failed to delete user:\", error);\r\n//   //   }\r\n//   // };\r\n//   const deleteUser = async (userId) => {\r\n//     try {\r\n//       const token = localStorage.getItem(\"token\");\r\n\r\n//       if (!token) {\r\n//         console.error(\"‚ùå No token found. User might not be logged in.\");\r\n//         return;\r\n//       }\r\n\r\n//       console.log(`üîπ Sending DELETE request for user ID: ${userId}`);\r\n\r\n//       const response = await fetch(`http://localhost:5000/api/users/${userId}`, {\r\n//         method: \"DELETE\",\r\n//         headers: {\r\n//           Authorization: `Bearer ${token}`,\r\n//           \"Content-Type\": \"application/json\",\r\n//         },\r\n//       });\r\n\r\n//       const data = await response.json();\r\n//       console.log(\"üîπ API Response:\", data);\r\n\r\n//       if (!response.ok) {\r\n//         throw new Error(data.message || \"Failed to delete user\");\r\n//       }\r\n\r\n//       console.log(\"‚úÖ User deleted successfully.\");\r\n//       fetchUsers(); // Refresh user list\r\n//     } catch (error) {\r\n//       console.error(\"‚ùå Failed to delete user:\", error);\r\n//     }\r\n// };\r\n\r\n\r\n//   const deleteNote = async (noteId) => {\r\n//     try {\r\n//       const token = localStorage.getItem(\"token\");\r\n\r\n//       const response = await fetch(`http://localhost:5000/api/notes/${noteId}`, {\r\n//         method: \"DELETE\",\r\n//         headers: { Authorization: `Bearer ${token}` },\r\n//       });\r\n\r\n//       if (!response.ok) throw new Error(\"Failed to delete note\");\r\n\r\n//       fetchNotes(token);\r\n//     } catch (error) {\r\n//       console.error(\"Error deleting note:\", error);\r\n//     }\r\n//   };\r\n\r\n//   if (loading) return <p>Loading...</p>;\r\n\r\n//   return (\r\n//     <div>\r\n//       <h2>Admin Panel</h2>\r\n\r\n//       {/* User Management */}\r\n//       <h3>User Management</h3>\r\n//       <table border=\"1\">\r\n//         <thead>\r\n//           <tr>\r\n//             <th>Username</th>\r\n//             <th>Email</th>\r\n//             <th>Role</th>\r\n//             <th>Actions</th>\r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>\r\n//           {users.map((user) => (\r\n//             <tr key={user._id}>\r\n//               <td>{user.username}</td>\r\n//               <td>{user.email}</td>\r\n//               <td>{user.role}</td>\r\n//               <td>\r\n//                 {user.role !== \"admin\" && (\r\n//                   <button onClick={() => changeRole(user._id)}>Promote to Admin</button>\r\n//                 )}\r\n//                 <button onClick={() => deleteUser(user._id)} style={{ marginLeft: \"10px\" }}>\r\n//                   Delete\r\n//                 </button>\r\n//               </td>\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table>\r\n\r\n//       {/* Notes Management */}\r\n//       <h3>Notes Management</h3>\r\n//       <button onClick={() => navigate(\"/admin/add-note\")}>‚ûï Add New Note</button>\r\n//       <table border=\"1\" style={{ marginTop: \"10px\", width: \"100%\" }}>\r\n//         <thead>\r\n//           <tr>\r\n//             <th>Title</th>\r\n//             <th>Content</th>\r\n//             <th>Actions</th>\r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>\r\n//           {notes.length === 0 ? (\r\n//             <tr>\r\n//               <td colSpan=\"3\">No notes available.</td>\r\n//             </tr>\r\n//           ) : (\r\n//             notes.map((note) => (\r\n//               <tr key={note._id}>\r\n//                 <td>{note.title}</td>\r\n//                 <td>{note.content}</td>\r\n//                 <td>\r\n//                   <button onClick={() => deleteNote(note._id)} style={{ marginLeft: \"10px\" }}>\r\n//                     üóëÔ∏è Delete\r\n//                   </button>\r\n//                 </td>\r\n//               </tr>\r\n//             ))\r\n//           )}\r\n//         </tbody>\r\n//       </table>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AdminPanel;\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst AdminPanel = () => {\r\n  const navigate = useNavigate();\r\n  const [users, setUsers] = useState([]);\r\n  const [notes, setNotes] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [noteTitle, setNoteTitle] = useState(\"\");\r\n  const [noteContent, setNoteContent] = useState(\"\");\r\n  const [editNoteId, setEditNoteId] = useState(null);\r\n  const [activeTab, setActiveTab] = useState(\"users\"); // Tab control\r\n\r\n  useEffect(() => {\r\n    const userRole = localStorage.getItem(\"role\");\r\n    const token = localStorage.getItem(\"token\");\r\n\r\n    if (!userRole || userRole !== \"admin\" || !token) {\r\n      navigate(\"/login\");\r\n      return;\r\n    }\r\n\r\n    fetchData(token);\r\n  }, [navigate]);\r\n\r\n  const fetchData = async (token) => {\r\n    try {\r\n      const [usersRes, notesRes] = await Promise.all([\r\n        fetch(\"http://localhost:5000/api/users\", {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        }),\r\n        fetch(\"http://localhost:5000/api/notes\", {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        }),\r\n      ]);\r\n\r\n      if (!usersRes.ok || !notesRes.ok) throw new Error(\"Failed to fetch data\");\r\n\r\n      setUsers(await usersRes.json());\r\n      setNotes(await notesRes.json());\r\n    } catch (error) {\r\n      console.error(\"Error fetching data:\", error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const changeRole = async (userId, newRole) => {\r\n    try {\r\n      const token = localStorage.getItem(\"token\");\r\n      const response = await fetch(`http://localhost:5000/api/users/${userId}/role`, {\r\n        method: \"PUT\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n        body: JSON.stringify({ role: newRole }),\r\n      });\r\n\r\n      if (!response.ok) throw new Error(\"Failed to update role\");\r\n\r\n      fetchData(token);\r\n    } catch (error) {\r\n      console.error(\"Error updating user role:\", error);\r\n    }\r\n  };\r\n\r\n  const deleteUser = async (userId) => {\r\n    if (!window.confirm(\"Are you sure you want to delete this user?\")) return;\r\n\r\n    try {\r\n      const token = localStorage.getItem(\"token\");\r\n      const response = await fetch(`http://localhost:5000/api/users/${userId}`, {\r\n        method: \"DELETE\",\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n\r\n      if (!response.ok) throw new Error(\"Failed to delete user\");\r\n\r\n      fetchData(token);\r\n    } catch (error) {\r\n      console.error(\"Error deleting user:\", error);\r\n    }\r\n  };\r\n\r\n  const deleteNote = async (noteId) => {\r\n    if (!window.confirm(\"Are you sure you want to delete this note?\")) return;\r\n\r\n    try {\r\n      const token = localStorage.getItem(\"token\");\r\n      const response = await fetch(`http://localhost:5000/api/notes/${noteId}`, {\r\n        method: \"DELETE\",\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n\r\n      if (!response.ok) throw new Error(\"Failed to delete note\");\r\n\r\n      fetchData(token);\r\n    } catch (error) {\r\n      console.error(\"Error deleting note:\", error);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const token = localStorage.getItem(\"token\");\r\n\r\n    if (!noteTitle || !noteContent) {\r\n      alert(\"Title and Content are required!\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      let url = \"http://localhost:5000/api/notes\";\r\n      let method = \"POST\";\r\n      let body = { title: noteTitle, content: noteContent };\r\n\r\n      if (editNoteId) {\r\n        url = `http://localhost:5000/api/notes/${editNoteId}`;\r\n        method = \"PUT\";\r\n      }\r\n\r\n      const response = await fetch(url, {\r\n        method,\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n        body: JSON.stringify(body),\r\n      });\r\n\r\n      if (!response.ok) throw new Error(\"Failed to save note\");\r\n\r\n      setNoteTitle(\"\");\r\n      setNoteContent(\"\");\r\n      setEditNoteId(null);\r\n      fetchData(token);\r\n    } catch (error) {\r\n      console.error(\"Error saving note:\", error);\r\n    }\r\n  };\r\n\r\n  const handleEdit = (note) => {\r\n    setNoteTitle(note.title);\r\n    setNoteContent(note.content);\r\n    setEditNoteId(note._id);\r\n  };\r\n\r\n  if (loading) return <p>Loading...</p>;\r\n\r\n  return (\r\n    <div>\r\n      <h2>Admin Panel</h2>\r\n\r\n      {/* Tab Navigation */}\r\n      <div>\r\n        <button onClick={() => setActiveTab(\"users\")}>User Management</button>\r\n        <button onClick={() => setActiveTab(\"notes\")}>Notes Management</button>\r\n      </div>\r\n\r\n      {/* User Management */}\r\n      {activeTab === \"users\" && (\r\n        <div>\r\n          <h3>User Management</h3>\r\n          <table border=\"1\">\r\n            <thead>\r\n              <tr>\r\n                <th>Name</th>\r\n                <th>Email</th>\r\n                <th>Role</th>\r\n                <th>Actions</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {users.length === 0 ? (\r\n                <tr>\r\n                  <td colSpan=\"4\">No users found.</td>\r\n                </tr>\r\n              ) : (\r\n                users.map((user) => (\r\n                  <tr key={user._id}>\r\n                    <td>{user.name}</td>\r\n                    <td>{user.email}</td>\r\n                    <td>{user.role}</td>\r\n                    <td>\r\n                      {user.role === \"admin\" ? (\r\n                        <button onClick={() => changeRole(user._id, \"user\")}>Revoke Admin</button>\r\n                      ) : (\r\n                        <button onClick={() => changeRole(user._id, \"admin\")}>Make Admin</button>\r\n                      )}\r\n                      <button onClick={() => deleteUser(user._id)}>üóëÔ∏è Delete</button>\r\n                    </td>\r\n                  </tr>\r\n                ))\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      )}\r\n\r\n      {/* Notes Management */}\r\n      {activeTab === \"notes\" && (\r\n        <div>\r\n          <h3>{editNoteId ? \"Edit Note\" : \"Add New Note\"}</h3>\r\n          <form onSubmit={handleSubmit}>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Note Title\"\r\n              value={noteTitle}\r\n              onChange={(e) => setNoteTitle(e.target.value)}\r\n              required\r\n            />\r\n            <textarea\r\n              placeholder=\"Note Content\"\r\n              value={noteContent}\r\n              onChange={(e) => setNoteContent(e.target.value)}\r\n              required\r\n            ></textarea>\r\n            <button type=\"submit\">{editNoteId ? \"Update Note\" : \"Add Note\"}</button>\r\n            {editNoteId && (\r\n              <button onClick={() => { setEditNoteId(null); setNoteTitle(\"\"); setNoteContent(\"\"); }}>\r\n                Cancel\r\n              </button>\r\n            )}\r\n          </form>\r\n\r\n          <h3>Notes Management</h3>\r\n          <table border=\"1\">\r\n            <thead>\r\n              <tr>\r\n                <th>Title</th>\r\n                <th>Content</th>\r\n                <th>Actions</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {notes.length === 0 ? (\r\n                <tr>\r\n                  <td colSpan=\"3\">No notes available.</td>\r\n                </tr>\r\n              ) : (\r\n                notes.map((note) => (\r\n                  <tr key={note._id}>\r\n                    <td>{note.title}</td>\r\n                    <td>{note.content}</td>\r\n                    <td>\r\n                      <button onClick={() => handleEdit(note)}>‚úèÔ∏è Edit</button>\r\n                      <button onClick={() => deleteNote(note._id)}>üóëÔ∏è Delete</button>\r\n                    </td>\r\n                  </tr>\r\n                ))\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminPanel;\r\n"],"mappings":";;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACS,KAAK,EAAEC,QA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}