{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getChildren = getChildren;\nexports.getParent = getParent;\nexports.getSiblings = getSiblings;\nexports.getAttributeValue = getAttributeValue;\nexports.hasAttrib = hasAttrib;\nexports.getName = getName;\nexports.nextElementSibling = nextElementSibling;\nexports.prevElementSibling = prevElementSibling;\nvar domhandler_1 = require(\"domhandler\");\n/**\n * Get a node's children.\n *\n * @category Traversal\n * @param elem Node to get the children of.\n * @returns `elem`'s children, or an empty array.\n */\nfunction getChildren(elem) {\n  return (0, domhandler_1.hasChildren)(elem) ? elem.children : [];\n}\n/**\n * Get a node's parent.\n *\n * @category Traversal\n * @param elem Node to get the parent of.\n * @returns `elem`'s parent node, or `null` if `elem` is a root node.\n */\nfunction getParent(elem) {\n  return elem.parent || null;\n}\n/**\n * Gets an elements siblings, including the element itself.\n *\n * Attempts to get the children through the element's parent first. If we don't\n * have a parent (the element is a root node), we walk the element's `prev` &\n * `next` to get all remaining nodes.\n *\n * @category Traversal\n * @param elem Element to get the siblings of.\n * @returns `elem`'s siblings, including `elem`.\n */\nfunction getSiblings(elem) {\n  var _a, _b;\n  var parent = getParent(elem);\n  if (parent != null) return getChildren(parent);\n  var siblings = [elem];\n  var prev = elem.prev,\n    next = elem.next;\n  while (prev != null) {\n    siblings.unshift(prev);\n    _a = prev, prev = _a.prev;\n  }\n  while (next != null) {\n    siblings.push(next);\n    _b = next, next = _b.next;\n  }\n  return siblings;\n}\n/**\n * Gets an attribute from an element.\n *\n * @category Traversal\n * @param elem Element to check.\n * @param name Attribute name to retrieve.\n * @returns The element's attribute value, or `undefined`.\n */\nfunction getAttributeValue(elem, name) {\n  var _a;\n  return (_a = elem.attribs) === null || _a === void 0 ? void 0 : _a[name];\n}\n/**\n * Checks whether an element has an attribute.\n *\n * @category Traversal\n * @param elem Element to check.\n * @param name Attribute name to look for.\n * @returns Returns whether `elem` has the attribute `name`.\n */\nfunction hasAttrib(elem, name) {\n  return elem.attribs != null && Object.prototype.hasOwnProperty.call(elem.attribs, name) && elem.attribs[name] != null;\n}\n/**\n * Get the tag name of an element.\n *\n * @category Traversal\n * @param elem The element to get the name for.\n * @returns The tag name of `elem`.\n */\nfunction getName(elem) {\n  return elem.name;\n}\n/**\n * Returns the next element sibling of a node.\n *\n * @category Traversal\n * @param elem The element to get the next sibling of.\n * @returns `elem`'s next sibling that is a tag, or `null` if there is no next\n * sibling.\n */\nfunction nextElementSibling(elem) {\n  var _a;\n  var next = elem.next;\n  while (next !== null && !(0, domhandler_1.isTag)(next)) _a = next, next = _a.next;\n  return next;\n}\n/**\n * Returns the previous element sibling of a node.\n *\n * @category Traversal\n * @param elem The element to get the previous sibling of.\n * @returns `elem`'s previous sibling that is a tag, or `null` if there is no\n * previous sibling.\n */\nfunction prevElementSibling(elem) {\n  var _a;\n  var prev = elem.prev;\n  while (prev !== null && !(0, domhandler_1.isTag)(prev)) _a = prev, prev = _a.prev;\n  return prev;\n}","map":{"version":3,"names":["exports","getChildren","getParent","getSiblings","getAttributeValue","hasAttrib","getName","nextElementSibling","prevElementSibling","domhandler_1","require","elem","hasChildren","children","parent","siblings","prev","next","unshift","_a","push","_b","name","attribs","Object","prototype","hasOwnProperty","call","isTag"],"sources":["https://raw.githubusercontent.com/fb55/domutils/0ab8bcf1ecfc70dfc93291a4cb2496578ac25e9c/src/traversal.ts"],"sourcesContent":[null],"mappings":";;;;;AAgBAA,OAAA,CAAAC,WAAA,GAAAA,WAAA;AAYAD,OAAA,CAAAE,SAAA,GAAAA,SAAA;AAeAF,OAAA,CAAAG,WAAA,GAAAA,WAAA;AAyBAH,OAAA,CAAAI,iBAAA,GAAAA,iBAAA;AAeAJ,OAAA,CAAAK,SAAA,GAAAA,SAAA;AAeAL,OAAA,CAAAM,OAAA,GAAAA,OAAA;AAYAN,OAAA,CAAAO,kBAAA,GAAAA,kBAAA;AAcAP,OAAA,CAAAQ,kBAAA,GAAAA,kBAAA;AA5HA,IAAAC,YAAA,GAAAC,OAAA;AASA;;;;;;;AAOA,SAAgBT,WAAWA,CAACU,IAAa;EACrC,OAAO,IAAAF,YAAA,CAAAG,WAAW,EAACD,IAAI,CAAC,GAAGA,IAAI,CAACE,QAAQ,GAAG,EAAE;AACjD;AAGA;;;;;;;AAOA,SAAgBX,SAASA,CAACS,IAAa;EACnC,OAAOA,IAAI,CAACG,MAAM,IAAI,IAAI;AAC9B;AAEA;;;;;;;;;;;AAWA,SAAgBX,WAAWA,CAACQ,IAAa;;EACrC,IAAMG,MAAM,GAAGZ,SAAS,CAACS,IAAI,CAAC;EAC9B,IAAIG,MAAM,IAAI,IAAI,EAAE,OAAOb,WAAW,CAACa,MAAM,CAAC;EAE9C,IAAMC,QAAQ,GAAG,CAACJ,IAAI,CAAC;EACjB,IAAAK,IAAI,GAAWL,IAAI,CAAAK,IAAf;IAAEC,IAAI,GAAKN,IAAI,CAAAM,IAAT;EAChB,OAAOD,IAAI,IAAI,IAAI,EAAE;IACjBD,QAAQ,CAACG,OAAO,CAACF,IAAI,CAAC;IACrBG,EAAA,GAAWH,IAAI,EAAbA,IAAI,GAAAG,EAAA,CAAAH,IAAA;EACX;EACA,OAAOC,IAAI,IAAI,IAAI,EAAE;IACjBF,QAAQ,CAACK,IAAI,CAACH,IAAI,CAAC;IAClBI,EAAA,GAAWJ,IAAI,EAAbA,IAAI,GAAAI,EAAA,CAAAJ,IAAA;EACX;EACA,OAAOF,QAAQ;AACnB;AAEA;;;;;;;;AAQA,SAAgBX,iBAAiBA,CAC7BO,IAAa,EACbW,IAAY;;EAEZ,OAAO,CAAAH,EAAA,GAAAR,IAAI,CAACY,OAAO,cAAAJ,EAAA,uBAAAA,EAAA,CAAGG,IAAI,CAAC;AAC/B;AAEA;;;;;;;;AAQA,SAAgBjB,SAASA,CAACM,IAAa,EAAEW,IAAY;EACjD,OACIX,IAAI,CAACY,OAAO,IAAI,IAAI,IACpBC,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAAChB,IAAI,CAACY,OAAO,EAAED,IAAI,CAAC,IACxDX,IAAI,CAACY,OAAO,CAACD,IAAI,CAAC,IAAI,IAAI;AAElC;AAEA;;;;;;;AAOA,SAAgBhB,OAAOA,CAACK,IAAa;EACjC,OAAOA,IAAI,CAACW,IAAI;AACpB;AAEA;;;;;;;;AAQA,SAAgBf,kBAAkBA,CAACI,IAAa;;EACtC,IAAAM,IAAI,GAAKN,IAAI,CAAAM,IAAT;EACV,OAAOA,IAAI,KAAK,IAAI,IAAI,CAAC,IAAAR,YAAA,CAAAmB,KAAK,EAACX,IAAI,CAAC,EAAGE,EAAA,GAAWF,IAAI,EAAbA,IAAI,GAAAE,EAAA,CAAAF,IAAA;EAC7C,OAAOA,IAAI;AACf;AAEA;;;;;;;;AAQA,SAAgBT,kBAAkBA,CAACG,IAAa;;EACtC,IAAAK,IAAI,GAAKL,IAAI,CAAAK,IAAT;EACV,OAAOA,IAAI,KAAK,IAAI,IAAI,CAAC,IAAAP,YAAA,CAAAmB,KAAK,EAACZ,IAAI,CAAC,EAAGG,EAAA,GAAWH,IAAI,EAAbA,IAAI,GAAAG,EAAA,CAAAH,IAAA;EAC7C,OAAOA,IAAI;AACf","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}