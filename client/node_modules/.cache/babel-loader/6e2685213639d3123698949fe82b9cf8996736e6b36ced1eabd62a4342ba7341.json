{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vaish\\\\OneDrive\\\\Desktop\\\\Notes_world\\\\educational-website\\\\client\\\\src\\\\components\\\\Login.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import { useNavigate, Link } from 'react-router-dom';\n// import './Login.css';\n\n// const Login = ({ setUsername, setAdminUsername, role = 'user' }) => {\n//   const navigate = useNavigate();\n//   const [formData, setFormData] = useState({ email: '', password: '' });\n//   const [message, setMessage] = useState('');\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [showForm, setShowForm] = useState(true); // State to control form visibility\n\n//   // Determine API endpoint & redirect path based on role\n//   const apiEndpoint = role === 'admin' ? 'http://localhost:5000/admin/login' : 'http://localhost:5000/login';\n//   const redirectPath = role === 'admin' ? '/admin' : '/';\n\n//   const handleChange = (e) => {\n//     setFormData({ ...formData, [e.target.name]: e.target.value });\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     setIsLoading(true);\n\n//     try {\n//       const response = await fetch(apiEndpoint, {\n//         method: 'POST',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify(formData),\n//       });\n\n//       const data = await response.json();\n//       console.log(\"Login Response:\", data); // Debugging: Check what backend returns\n\n//       if (response.ok) {\n//         const storageKey = role === 'admin' ? 'adminToken' : 'token';\n//         const usernameKey = role === 'admin' ? 'adminUsername' : 'username';\n\n//         localStorage.setItem(storageKey, data.token);\n//         localStorage.setItem(usernameKey, data.username);\n//         localStorage.setItem('role', data.role); // ✅ Store role in localStorage!\n\n//         if (role === 'admin') {\n//           setAdminUsername(data.username);\n//         } else {\n//           setUsername(data.username);\n//         }\n\n//         setMessage(`${role.charAt(0).toUpperCase() + role.slice(1)} login successful! Redirecting...`);\n\n//         setTimeout(() => {\n//           navigate(redirectPath);\n//           window.location.reload(); // Refresh UI\n//         }, 1500);\n//       } else {\n//         setMessage(data.message || 'Invalid credentials. Try again.');\n//       }\n//     } catch (error) {\n//       setMessage('Server error. Please try again later.');\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n\n//   const handleCloseForm = () => {\n//     setShowForm(false); // Close the form when the button is clicked\n//   };\n\n//   return (\n//     <>\n//       {showForm && (\n//         <div className=\"login-form-container\">\n//           <button className=\"close-btn\" onClick={handleCloseForm}>\n//             &times; {/* Cross symbol for close */}\n//           </button>\n//           <h2>{role === 'admin' ? 'Admin Login' : 'User Login'}</h2>\n//           <form onSubmit={handleSubmit} className=\"login-form\">\n//             <div className=\"input-group\">\n//               <input\n//                 type=\"email\"\n//                 name=\"email\"\n//                 placeholder={`${role === 'admin' ? 'Admin Email' : 'Email'}`}\n//                 value={formData.email}\n//                 onChange={handleChange}\n//                 required\n//               />\n//             </div>\n//             <div className=\"input-group\">\n//               <input\n//                 type=\"password\"\n//                 name=\"password\"\n//                 placeholder={`${role === 'admin' ? 'Admin Password' : 'Password'}`}\n//                 value={formData.password}\n//                 onChange={handleChange}\n//                 required\n//               />\n//             </div>\n//             <button type=\"submit\" className=\"submit-btn\" disabled={isLoading}>\n//               {isLoading ? 'Logging in...' : 'Login'}\n//             </button>\n//           </form>\n//           {message && <p className={message.includes('success') ? 'success' : 'error'}>{message}</p>}\n//           {role === 'user' ? (\n//             <p>Don't have an account? <Link to=\"/register\">Sign Up</Link></p>\n//           ) : (\n//             <p>Not an admin? <Link to=\"/login\">User Login</Link></p>\n//           )}\n//         </div>\n//       )}\n//     </>\n//   );\n// };\n\n// export default Login;\n// import React, { useState } from 'react';\n// import { useNavigate, Link } from 'react-router-dom';\n// import './Login.css';\n\n// const Login = ({ setUsername, setAdminUsername, role = 'user' }) => {\n//   const navigate = useNavigate();\n//   const [formData, setFormData] = useState({ email: '', password: '' });\n//   const [message, setMessage] = useState('');\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [showForm, setShowForm] = useState(true); // State to control form visibility\n\n//   // Determine API endpoint & redirect path based on role\n//   const apiEndpoint = role === 'admin' ? 'http://localhost:5000/admin/login' : 'http://localhost:5000/api/auth/login';\n//   const redirectPath = role === 'admin' ? '/admin' : '/dashboard'; // Redirect users to dashboard after login\n\n//   const handleChange = (e) => {\n//     setFormData({ ...formData, [e.target.name]: e.target.value });\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     setIsLoading(true);\n//     setMessage(''); // Clear previous messages\n\n//     try {\n//       const response = await fetch(apiEndpoint, {\n//         method: 'POST',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify(formData),\n//       });\n\n//       const data = await response.json();\n//       console.log(\"Login Response:\", data); // Debugging: Check what backend returns\n\n//       if (response.ok) {\n//         const storageKey = role === 'admin' ? 'adminToken' : 'token';\n//         const usernameKey = role === 'admin' ? 'adminUsername' : 'username';\n\n//         localStorage.setItem(storageKey, data.token);\n//         localStorage.setItem(usernameKey, data.username);\n//         localStorage.setItem('role', data.role); // ✅ Store role in localStorage!\n\n//         if (role === 'admin') {\n//           setAdminUsername(data.username);\n//         } else {\n//           setUsername(data.username);\n//         }\n\n//         setMessage(`${role.charAt(0).toUpperCase() + role.slice(1)} login successful! Redirecting...`);\n\n//         setTimeout(() => {\n//           navigate(redirectPath);\n//         }, 1500);\n//       } else {\n//         setMessage(data.message || 'Invalid credentials. Try again.');\n//       }\n//     } catch (error) {\n//       setMessage('Server error. Please try again later.');\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n\n//   return (\n//     <>\n//       {showForm && (\n//         <div className=\"login-form-container\">\n//           <button className=\"close-btn\" onClick={() => setShowForm(false)}>\n//             &times; {/* Cross symbol for close */}\n//           </button>\n//           <h2>{role === 'admin' ? 'Admin Login' : 'User Login'}</h2>\n//           <form onSubmit={handleSubmit} className=\"login-form\">\n//             <div className=\"input-group\">\n//               <input\n//                 type=\"email\"\n//                 name=\"email\"\n//                 placeholder={`${role === 'admin' ? 'Admin Email' : 'Email'}`}\n//                 value={formData.email}\n//                 onChange={handleChange}\n//                 required\n//               />\n//             </div>\n//             <div className=\"input-group\">\n//               <input\n//                 type=\"password\"\n//                 name=\"password\"\n//                 placeholder={`${role === 'admin' ? 'Admin Password' : 'Password'}`}\n//                 value={formData.password}\n//                 onChange={handleChange}\n//                 required\n//               />\n//             </div>\n//             <button type=\"submit\" className=\"submit-btn\" disabled={isLoading}>\n//               {isLoading ? 'Logging in...' : 'Login'}\n//             </button>\n//           </form>\n//           {message && <p className={message.includes('success') ? 'success' : 'error'}>{message}</p>}\n//           {role === 'user' ? (\n//             <p>Don't have an account? <Link to=\"/register\">Sign Up</Link></p>\n//           ) : (\n//             <p>Not an admin? <Link to=\"/login\">User Login</Link></p>\n//           )}\n//         </div>\n//       )}\n//     </>\n//   );\n// };\n\n// export default Login;\nimport React, { useState } from 'react';\nimport { useNavigate, Link } from 'react-router-dom';\nimport './Login.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Login = ({\n  setUsername,\n  setAdminUsername,\n  role = 'user'\n}) => {\n  _s();\n  const navigate = useNavigate();\n  const [formData, setFormData] = useState({\n    email: '',\n    password: ''\n  });\n  const [message, setMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [showForm, setShowForm] = useState(true); // Control form visibility\n\n  // API endpoint and redirect path based on role\n  const apiEndpoint = role === 'admin' ? 'http://localhost:5000/admin/login' : 'http://localhost:5000/api/auth/login';\n  const redirectPath = role === 'admin' ? '/admin' : '/dashboard';\n  const handleChange = e => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n  };\n  const loginUser = async () => {\n    try {\n      const response = await fetch(apiEndpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formData)\n      });\n      const data = await response.json();\n      console.log(\"Login Response:\", data);\n      if (response.ok) {\n        const storageKey = role === 'admin' ? 'adminToken' : 'token';\n        const usernameKey = role === 'admin' ? 'adminUsername' : 'username';\n        sessionStorage.setItem(storageKey, data.token); // ✅ Use sessionStorage instead of localStorage\n        sessionStorage.setItem(usernameKey, data.username);\n        sessionStorage.setItem('role', data.role);\n        role === 'admin' ? setAdminUsername(data.username) : setUsername(data.username);\n        setMessage(`${role.charAt(0).toUpperCase() + role.slice(1)} login successful! Redirecting...`);\n        setTimeout(() => navigate(redirectPath), 1500);\n      } else {\n        setMessage(data.message || 'Invalid credentials. Try again.');\n        setFormData(prev => ({\n          ...prev,\n          password: ''\n        })); // Clear password field on failure\n      }\n    } catch (error) {\n      setMessage('Network error. Please try again later.');\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setMessage('');\n    setIsLoading(true);\n    await loginUser();\n    setIsLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: showForm && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"login-form-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"close-btn\",\n        onClick: () => setShowForm(false),\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: role === 'admin' ? 'Admin Login' : 'User Login'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"login-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            name: \"email\",\n            placeholder: `${role === 'admin' ? 'Admin Email' : 'Email'}`,\n            value: formData.email,\n            onChange: handleChange,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            name: \"password\",\n            placeholder: `${role === 'admin' ? 'Admin Password' : 'Password'}`,\n            value: formData.password,\n            onChange: handleChange,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"submit-btn\",\n          disabled: isLoading,\n          children: isLoading ? /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"spinner\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 28\n          }, this) : 'Login'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 11\n      }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: message.includes('success') ? 'success' : 'error',\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 23\n      }, this), role === 'user' ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Don't have an account? \", /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/register\",\n          children: \"Sign Up\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 39\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Not an admin? \", /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/login\",\n          children: \"User Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 30\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n_s(Login, \"6B7tHedmFZX4dUuVGvAQ6/sKkqA=\", false, function () {\n  return [useNavigate];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useNavigate","Link","jsxDEV","_jsxDEV","Fragment","_Fragment","Login","setUsername","setAdminUsername","role","_s","navigate","formData","setFormData","email","password","message","setMessage","isLoading","setIsLoading","showForm","setShowForm","apiEndpoint","redirectPath","handleChange","e","target","name","value","loginUser","response","fetch","method","headers","body","JSON","stringify","data","json","console","log","ok","storageKey","usernameKey","sessionStorage","setItem","token","username","charAt","toUpperCase","slice","setTimeout","prev","error","handleSubmit","preventDefault","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","onChange","required","disabled","includes","to","_c","$RefreshReg$"],"sources":["C:/Users/vaish/OneDrive/Desktop/Notes_world/educational-website/client/src/components/Login.js"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import { useNavigate, Link } from 'react-router-dom';\r\n// import './Login.css';\r\n\r\n// const Login = ({ setUsername, setAdminUsername, role = 'user' }) => {\r\n//   const navigate = useNavigate();\r\n//   const [formData, setFormData] = useState({ email: '', password: '' });\r\n//   const [message, setMessage] = useState('');\r\n//   const [isLoading, setIsLoading] = useState(false);\r\n//   const [showForm, setShowForm] = useState(true); // State to control form visibility\r\n\r\n//   // Determine API endpoint & redirect path based on role\r\n//   const apiEndpoint = role === 'admin' ? 'http://localhost:5000/admin/login' : 'http://localhost:5000/login';\r\n//   const redirectPath = role === 'admin' ? '/admin' : '/';\r\n\r\n//   const handleChange = (e) => {\r\n//     setFormData({ ...formData, [e.target.name]: e.target.value });\r\n//   };\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     setIsLoading(true);\r\n\r\n//     try {\r\n//       const response = await fetch(apiEndpoint, {\r\n//         method: 'POST',\r\n//         headers: { 'Content-Type': 'application/json' },\r\n//         body: JSON.stringify(formData),\r\n//       });\r\n\r\n//       const data = await response.json();\r\n//       console.log(\"Login Response:\", data); // Debugging: Check what backend returns\r\n\r\n//       if (response.ok) {\r\n//         const storageKey = role === 'admin' ? 'adminToken' : 'token';\r\n//         const usernameKey = role === 'admin' ? 'adminUsername' : 'username';\r\n\r\n//         localStorage.setItem(storageKey, data.token);\r\n//         localStorage.setItem(usernameKey, data.username);\r\n//         localStorage.setItem('role', data.role); // ✅ Store role in localStorage!\r\n\r\n//         if (role === 'admin') {\r\n//           setAdminUsername(data.username);\r\n//         } else {\r\n//           setUsername(data.username);\r\n//         }\r\n\r\n//         setMessage(`${role.charAt(0).toUpperCase() + role.slice(1)} login successful! Redirecting...`);\r\n\r\n//         setTimeout(() => {\r\n//           navigate(redirectPath);\r\n//           window.location.reload(); // Refresh UI\r\n//         }, 1500);\r\n//       } else {\r\n//         setMessage(data.message || 'Invalid credentials. Try again.');\r\n//       }\r\n//     } catch (error) {\r\n//       setMessage('Server error. Please try again later.');\r\n//     } finally {\r\n//       setIsLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   const handleCloseForm = () => {\r\n//     setShowForm(false); // Close the form when the button is clicked\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       {showForm && (\r\n//         <div className=\"login-form-container\">\r\n//           <button className=\"close-btn\" onClick={handleCloseForm}>\r\n//             &times; {/* Cross symbol for close */}\r\n//           </button>\r\n//           <h2>{role === 'admin' ? 'Admin Login' : 'User Login'}</h2>\r\n//           <form onSubmit={handleSubmit} className=\"login-form\">\r\n//             <div className=\"input-group\">\r\n//               <input\r\n//                 type=\"email\"\r\n//                 name=\"email\"\r\n//                 placeholder={`${role === 'admin' ? 'Admin Email' : 'Email'}`}\r\n//                 value={formData.email}\r\n//                 onChange={handleChange}\r\n//                 required\r\n//               />\r\n//             </div>\r\n//             <div className=\"input-group\">\r\n//               <input\r\n//                 type=\"password\"\r\n//                 name=\"password\"\r\n//                 placeholder={`${role === 'admin' ? 'Admin Password' : 'Password'}`}\r\n//                 value={formData.password}\r\n//                 onChange={handleChange}\r\n//                 required\r\n//               />\r\n//             </div>\r\n//             <button type=\"submit\" className=\"submit-btn\" disabled={isLoading}>\r\n//               {isLoading ? 'Logging in...' : 'Login'}\r\n//             </button>\r\n//           </form>\r\n//           {message && <p className={message.includes('success') ? 'success' : 'error'}>{message}</p>}\r\n//           {role === 'user' ? (\r\n//             <p>Don't have an account? <Link to=\"/register\">Sign Up</Link></p>\r\n//           ) : (\r\n//             <p>Not an admin? <Link to=\"/login\">User Login</Link></p>\r\n//           )}\r\n//         </div>\r\n//       )}\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default Login;\r\n// import React, { useState } from 'react';\r\n// import { useNavigate, Link } from 'react-router-dom';\r\n// import './Login.css';\r\n\r\n// const Login = ({ setUsername, setAdminUsername, role = 'user' }) => {\r\n//   const navigate = useNavigate();\r\n//   const [formData, setFormData] = useState({ email: '', password: '' });\r\n//   const [message, setMessage] = useState('');\r\n//   const [isLoading, setIsLoading] = useState(false);\r\n//   const [showForm, setShowForm] = useState(true); // State to control form visibility\r\n\r\n//   // Determine API endpoint & redirect path based on role\r\n//   const apiEndpoint = role === 'admin' ? 'http://localhost:5000/admin/login' : 'http://localhost:5000/api/auth/login';\r\n//   const redirectPath = role === 'admin' ? '/admin' : '/dashboard'; // Redirect users to dashboard after login\r\n\r\n//   const handleChange = (e) => {\r\n//     setFormData({ ...formData, [e.target.name]: e.target.value });\r\n//   };\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     setIsLoading(true);\r\n//     setMessage(''); // Clear previous messages\r\n\r\n//     try {\r\n//       const response = await fetch(apiEndpoint, {\r\n//         method: 'POST',\r\n//         headers: { 'Content-Type': 'application/json' },\r\n//         body: JSON.stringify(formData),\r\n//       });\r\n\r\n//       const data = await response.json();\r\n//       console.log(\"Login Response:\", data); // Debugging: Check what backend returns\r\n\r\n//       if (response.ok) {\r\n//         const storageKey = role === 'admin' ? 'adminToken' : 'token';\r\n//         const usernameKey = role === 'admin' ? 'adminUsername' : 'username';\r\n\r\n//         localStorage.setItem(storageKey, data.token);\r\n//         localStorage.setItem(usernameKey, data.username);\r\n//         localStorage.setItem('role', data.role); // ✅ Store role in localStorage!\r\n\r\n//         if (role === 'admin') {\r\n//           setAdminUsername(data.username);\r\n//         } else {\r\n//           setUsername(data.username);\r\n//         }\r\n\r\n//         setMessage(`${role.charAt(0).toUpperCase() + role.slice(1)} login successful! Redirecting...`);\r\n\r\n//         setTimeout(() => {\r\n//           navigate(redirectPath);\r\n//         }, 1500);\r\n//       } else {\r\n//         setMessage(data.message || 'Invalid credentials. Try again.');\r\n//       }\r\n//     } catch (error) {\r\n//       setMessage('Server error. Please try again later.');\r\n//     } finally {\r\n//       setIsLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       {showForm && (\r\n//         <div className=\"login-form-container\">\r\n//           <button className=\"close-btn\" onClick={() => setShowForm(false)}>\r\n//             &times; {/* Cross symbol for close */}\r\n//           </button>\r\n//           <h2>{role === 'admin' ? 'Admin Login' : 'User Login'}</h2>\r\n//           <form onSubmit={handleSubmit} className=\"login-form\">\r\n//             <div className=\"input-group\">\r\n//               <input\r\n//                 type=\"email\"\r\n//                 name=\"email\"\r\n//                 placeholder={`${role === 'admin' ? 'Admin Email' : 'Email'}`}\r\n//                 value={formData.email}\r\n//                 onChange={handleChange}\r\n//                 required\r\n//               />\r\n//             </div>\r\n//             <div className=\"input-group\">\r\n//               <input\r\n//                 type=\"password\"\r\n//                 name=\"password\"\r\n//                 placeholder={`${role === 'admin' ? 'Admin Password' : 'Password'}`}\r\n//                 value={formData.password}\r\n//                 onChange={handleChange}\r\n//                 required\r\n//               />\r\n//             </div>\r\n//             <button type=\"submit\" className=\"submit-btn\" disabled={isLoading}>\r\n//               {isLoading ? 'Logging in...' : 'Login'}\r\n//             </button>\r\n//           </form>\r\n//           {message && <p className={message.includes('success') ? 'success' : 'error'}>{message}</p>}\r\n//           {role === 'user' ? (\r\n//             <p>Don't have an account? <Link to=\"/register\">Sign Up</Link></p>\r\n//           ) : (\r\n//             <p>Not an admin? <Link to=\"/login\">User Login</Link></p>\r\n//           )}\r\n//         </div>\r\n//       )}\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default Login;\r\nimport React, { useState } from 'react';\r\nimport { useNavigate, Link } from 'react-router-dom';\r\nimport './Login.css';\r\n\r\nconst Login = ({ setUsername, setAdminUsername, role = 'user' }) => {\r\n  const navigate = useNavigate();\r\n  const [formData, setFormData] = useState({ email: '', password: '' });\r\n  const [message, setMessage] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [showForm, setShowForm] = useState(true); // Control form visibility\r\n\r\n  // API endpoint and redirect path based on role\r\n  const apiEndpoint = role === 'admin' ? 'http://localhost:5000/admin/login' : 'http://localhost:5000/api/auth/login';\r\n  const redirectPath = role === 'admin' ? '/admin' : '/dashboard'; \r\n\r\n  const handleChange = (e) => {\r\n    setFormData({ ...formData, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const loginUser = async () => {\r\n    try {\r\n      const response = await fetch(apiEndpoint, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(formData),\r\n      });\r\n\r\n      const data = await response.json();\r\n      console.log(\"Login Response:\", data); \r\n\r\n      if (response.ok) {\r\n        const storageKey = role === 'admin' ? 'adminToken' : 'token';\r\n        const usernameKey = role === 'admin' ? 'adminUsername' : 'username';\r\n\r\n        sessionStorage.setItem(storageKey, data.token); // ✅ Use sessionStorage instead of localStorage\r\n        sessionStorage.setItem(usernameKey, data.username);\r\n        sessionStorage.setItem('role', data.role);\r\n\r\n        role === 'admin' ? setAdminUsername(data.username) : setUsername(data.username);\r\n        setMessage(`${role.charAt(0).toUpperCase() + role.slice(1)} login successful! Redirecting...`);\r\n\r\n        setTimeout(() => navigate(redirectPath), 1500);\r\n      } else {\r\n        setMessage(data.message || 'Invalid credentials. Try again.');\r\n        setFormData((prev) => ({ ...prev, password: '' })); // Clear password field on failure\r\n      }\r\n    } catch (error) {\r\n      setMessage('Network error. Please try again later.');\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setMessage('');\r\n    setIsLoading(true);\r\n    await loginUser();\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {showForm && (\r\n        <div className=\"login-form-container\">\r\n          <button className=\"close-btn\" onClick={() => setShowForm(false)}>\r\n            &times;\r\n          </button>\r\n          <h2>{role === 'admin' ? 'Admin Login' : 'User Login'}</h2>\r\n          <form onSubmit={handleSubmit} className=\"login-form\">\r\n            <div className=\"input-group\">\r\n              <input\r\n                type=\"email\"\r\n                name=\"email\"\r\n                placeholder={`${role === 'admin' ? 'Admin Email' : 'Email'}`}\r\n                value={formData.email}\r\n                onChange={handleChange}\r\n                required\r\n              />\r\n            </div>\r\n            <div className=\"input-group\">\r\n              <input\r\n                type=\"password\"\r\n                name=\"password\"\r\n                placeholder={`${role === 'admin' ? 'Admin Password' : 'Password'}`}\r\n                value={formData.password}\r\n                onChange={handleChange}\r\n                required\r\n              />\r\n            </div>\r\n            <button type=\"submit\" className=\"submit-btn\" disabled={isLoading}>\r\n              {isLoading ? <span className=\"spinner\"></span> : 'Login'}\r\n            </button>\r\n          </form>\r\n          {message && <p className={message.includes('success') ? 'success' : 'error'}>{message}</p>}\r\n          {role === 'user' ? (\r\n            <p>Don't have an account? <Link to=\"/register\">Sign Up</Link></p>\r\n          ) : (\r\n            <p>Not an admin? <Link to=\"/login\">User Login</Link></p>\r\n          )}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,EAAEC,IAAI,QAAQ,kBAAkB;AACpD,OAAO,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAErB,MAAMC,KAAK,GAAGA,CAAC;EAAEC,WAAW;EAAEC,gBAAgB;EA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}