{"ast":null,"code":"// import React, { useEffect, useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n\n// const AdminPanel = () => {\n//   const navigate = useNavigate();\n//   const [users, setUsers] = useState([]);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     const userRole = localStorage.getItem(\"role\");\n//     const token = localStorage.getItem(\"token\");\n\n//     if (!userRole || userRole !== \"admin\" || !token) {\n//       navigate(\"/login\");\n//       return;\n//     }\n\n//     fetchUsers(token);\n//   }, [navigate]);\n\n//   const fetchUsers = async (token) => {\n//     try {\n//       const response = await fetch(\"http://localhost:5000/api/users\", {\n//         headers: { Authorization: `Bearer ${token}` },\n//       });\n\n//       if (!response.ok) {\n//         throw new Error(`Failed to fetch users: ${response.status} ${response.statusText}`);\n//       }\n\n//       const data = await response.json();\n//       setUsers(data);\n//     } catch (error) {\n//       console.error(\"üö® Error fetching users:\", error.message);\n//       alert(\"Failed to load users. Check your connection or server.\");\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const changeRole = async (userId) => {\n//     try {\n//       const token = localStorage.getItem(\"token\");\n\n//       const response = await fetch(`http://localhost:5000/api/promote/${userId}`, {\n//         method: \"PUT\",\n//         headers: { \"Content-Type\": \"application/json\", Authorization: `Bearer ${token}` },\n//         body: JSON.stringify({ role: \"admin\" }),\n//       });\n\n//       if (!response.ok) throw new Error(\"Failed to update role\");\n\n//       fetchUsers(token);\n//     } catch (error) {\n//       console.error(\"Failed to update role:\", error);\n//     }\n//   };\n\n//   const deleteUser = async (userId) => {\n//     try {\n//       const token = localStorage.getItem(\"token\");\n\n//       if (!token) {\n//         console.error(\"‚ùå No token found. User might not be logged in.\");\n//         return;\n//       }\n\n//       console.log(`üîπ Sending DELETE request for user ID: ${userId}`);\n\n//       const response = await fetch(`http://localhost:5000/api/users/${userId}`, {\n//         method: \"DELETE\",\n//         headers: {\n//           Authorization: `Bearer ${token}`,\n//           \"Content-Type\": \"application/json\",\n//         },\n//       });\n\n//       const data = await response.json();\n//       console.log(\"üîπ API Response:\", data);\n\n//       if (!response.ok) {\n//         throw new Error(data.message || \"Failed to delete user\");\n//       }\n\n//       console.log(\"‚úÖ User deleted successfully.\");\n//       fetchUsers(localStorage.getItem(\"token\")); // Refresh user list\n//     } catch (error) {\n//       console.error(\"‚ùå Failed to delete user:\", error);\n//     }\n//   };\n\n//   if (loading) return <p>Loading...</p>;\n\n//   return (\n//     <div>\n//       <h2>Admin Panel</h2>\n\n//       {/* User Management */}\n//       <h3>User Management</h3>\n//       <table border=\"1\">\n//         <thead>\n//           <tr>\n//             <th>Username</th>\n//             <th>Email</th>\n//             <th>Role</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {users.map((user) => (\n//             <tr key={user._id}>\n//               <td>{user.username}</td>\n//               <td>{user.email}</td>\n//               <td>{user.role}</td>\n//               <td>\n//                 {user.role !== \"admin\" && (\n//                   <button onClick={() => changeRole(user._id)}>Promote to Admin</button>\n//                 )}\n//                 <button onClick={() => deleteUser(user._id)} style={{ marginLeft: \"10px\" }}>\n//                   Delete\n//                 </button>\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default AdminPanel;","map":{"version":3,"names":[],"sources":["C:/Users/vaish/OneDrive/Desktop/Notes_world/educational-website/client/src/components/AdminPanel.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n\r\n// const AdminPanel = () => {\r\n//   const navigate = useNavigate();\r\n//   const [users, setUsers] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n\r\n//   useEffect(() => {\r\n//     const userRole = localStorage.getItem(\"role\");\r\n//     const token = localStorage.getItem(\"token\");\r\n\r\n//     if (!userRole || userRole !== \"admin\" || !token) {\r\n//       navigate(\"/login\");\r\n//       return;\r\n//     }\r\n\r\n//     fetchUsers(token);\r\n//   }, [navigate]);\r\n\r\n//   const fetchUsers = async (token) => {\r\n//     try {\r\n//       const response = await fetch(\"http://localhost:5000/api/users\", {\r\n//         headers: { Authorization: `Bearer ${token}` },\r\n//       });\r\n\r\n//       if (!response.ok) {\r\n//         throw new Error(`Failed to fetch users: ${response.status} ${response.statusText}`);\r\n//       }\r\n\r\n//       const data = await response.json();\r\n//       setUsers(data);\r\n//     } catch (error) {\r\n//       console.error(\"üö® Error fetching users:\", error.message);\r\n//       alert(\"Failed to load users. Check your connection or server.\");\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   const changeRole = async (userId) => {\r\n//     try {\r\n//       const token = localStorage.getItem(\"token\");\r\n\r\n//       const response = await fetch(`http://localhost:5000/api/promote/${userId}`, {\r\n//         method: \"PUT\",\r\n//         headers: { \"Content-Type\": \"application/json\", Authorization: `Bearer ${token}` },\r\n//         body: JSON.stringify({ role: \"admin\" }),\r\n//       });\r\n\r\n//       if (!response.ok) throw new Error(\"Failed to update role\");\r\n\r\n//       fetchUsers(token);\r\n//     } catch (error) {\r\n//       console.error(\"Failed to update role:\", error);\r\n//     }\r\n//   };\r\n\r\n//   const deleteUser = async (userId) => {\r\n//     try {\r\n//       const token = localStorage.getItem(\"token\");\r\n\r\n//       if (!token) {\r\n//         console.error(\"‚ùå No token found. User might not be logged in.\");\r\n//         return;\r\n//       }\r\n\r\n//       console.log(`üîπ Sending DELETE request for user ID: ${userId}`);\r\n\r\n//       const response = await fetch(`http://localhost:5000/api/users/${userId}`, {\r\n//         method: \"DELETE\",\r\n//         headers: {\r\n//           Authorization: `Bearer ${token}`,\r\n//           \"Content-Type\": \"application/json\",\r\n//         },\r\n//       });\r\n\r\n//       const data = await response.json();\r\n//       console.log(\"üîπ API Response:\", data);\r\n\r\n//       if (!response.ok) {\r\n//         throw new Error(data.message || \"Failed to delete user\");\r\n//       }\r\n\r\n//       console.log(\"‚úÖ User deleted successfully.\");\r\n//       fetchUsers(localStorage.getItem(\"token\")); // Refresh user list\r\n//     } catch (error) {\r\n//       console.error(\"‚ùå Failed to delete user:\", error);\r\n//     }\r\n//   };\r\n\r\n//   if (loading) return <p>Loading...</p>;\r\n\r\n//   return (\r\n//     <div>\r\n//       <h2>Admin Panel</h2>\r\n\r\n//       {/* User Management */}\r\n//       <h3>User Management</h3>\r\n//       <table border=\"1\">\r\n//         <thead>\r\n//           <tr>\r\n//             <th>Username</th>\r\n//             <th>Email</th>\r\n//             <th>Role</th>\r\n//             <th>Actions</th>\r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>\r\n//           {users.map((user) => (\r\n//             <tr key={user._id}>\r\n//               <td>{user.username}</td>\r\n//               <td>{user.email}</td>\r\n//               <td>{user.role}</td>\r\n//               <td>\r\n//                 {user.role !== \"admin\" && (\r\n//                   <button onClick={() => changeRole(user._id)}>Promote to Admin</button>\r\n//                 )}\r\n//                 <button onClick={() => deleteUser(user._id)} style={{ marginLeft: \"10px\" }}>\r\n//                   Delete\r\n//                 </button>\r\n//               </td>\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AdminPanel;\r\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}