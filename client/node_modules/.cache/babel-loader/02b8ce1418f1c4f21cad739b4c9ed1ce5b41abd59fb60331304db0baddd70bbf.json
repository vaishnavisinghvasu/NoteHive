{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.filter = filter;\nexports.find = find;\nexports.findOneChild = findOneChild;\nexports.findOne = findOne;\nexports.existsOne = existsOne;\nexports.findAll = findAll;\nvar domhandler_1 = require(\"domhandler\");\n/**\n * Search a node and its children for nodes passing a test function. If `node` is not an array, it will be wrapped in one.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param node Node to search. Will be included in the result set if it matches.\n * @param recurse Also consider child nodes.\n * @param limit Maximum number of nodes to return.\n * @returns All nodes passing `test`.\n */\nfunction filter(test, node, recurse, limit) {\n  if (recurse === void 0) {\n    recurse = true;\n  }\n  if (limit === void 0) {\n    limit = Infinity;\n  }\n  return find(test, Array.isArray(node) ? node : [node], recurse, limit);\n}\n/**\n * Search an array of nodes and their children for nodes passing a test function.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @param recurse Also consider child nodes.\n * @param limit Maximum number of nodes to return.\n * @returns All nodes passing `test`.\n */\nfunction find(test, nodes, recurse, limit) {\n  var result = [];\n  /** Stack of the arrays we are looking at. */\n  var nodeStack = [Array.isArray(nodes) ? nodes : [nodes]];\n  /** Stack of the indices within the arrays. */\n  var indexStack = [0];\n  for (;;) {\n    // First, check if the current array has any more elements to look at.\n    if (indexStack[0] >= nodeStack[0].length) {\n      // If we have no more arrays to look at, we are done.\n      if (indexStack.length === 1) {\n        return result;\n      }\n      // Otherwise, remove the current array from the stack.\n      nodeStack.shift();\n      indexStack.shift();\n      // Loop back to the start to continue with the next array.\n      continue;\n    }\n    var elem = nodeStack[0][indexStack[0]++];\n    if (test(elem)) {\n      result.push(elem);\n      if (--limit <= 0) return result;\n    }\n    if (recurse && (0, domhandler_1.hasChildren)(elem) && elem.children.length > 0) {\n      /*\n       * Add the children to the stack. We are depth-first, so this is\n       * the next array we look at.\n       */\n      indexStack.unshift(0);\n      nodeStack.unshift(elem.children);\n    }\n  }\n}\n/**\n * Finds the first element inside of an array that matches a test function. This is an alias for `Array.prototype.find`.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @returns The first node in the array that passes `test`.\n * @deprecated Use `Array.prototype.find` directly.\n */\nfunction findOneChild(test, nodes) {\n  return nodes.find(test);\n}\n/**\n * Finds one element in a tree that passes a test.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Node or array of nodes to search.\n * @param recurse Also consider child nodes.\n * @returns The first node that passes `test`.\n */\nfunction findOne(test, nodes, recurse) {\n  if (recurse === void 0) {\n    recurse = true;\n  }\n  var searchedNodes = Array.isArray(nodes) ? nodes : [nodes];\n  for (var i = 0; i < searchedNodes.length; i++) {\n    var node = searchedNodes[i];\n    if ((0, domhandler_1.isTag)(node) && test(node)) {\n      return node;\n    }\n    if (recurse && (0, domhandler_1.hasChildren)(node) && node.children.length > 0) {\n      var found = findOne(test, node.children, true);\n      if (found) return found;\n    }\n  }\n  return null;\n}\n/**\n * Checks if a tree of nodes contains at least one node passing a test.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @returns Whether a tree of nodes contains at least one node passing the test.\n */\nfunction existsOne(test, nodes) {\n  return (Array.isArray(nodes) ? nodes : [nodes]).some(function (node) {\n    return (0, domhandler_1.isTag)(node) && test(node) || (0, domhandler_1.hasChildren)(node) && existsOne(test, node.children);\n  });\n}\n/**\n * Search an array of nodes and their children for elements passing a test function.\n *\n * Same as `find`, but limited to elements and with less options, leading to reduced complexity.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @returns All nodes passing `test`.\n */\nfunction findAll(test, nodes) {\n  var result = [];\n  var nodeStack = [Array.isArray(nodes) ? nodes : [nodes]];\n  var indexStack = [0];\n  for (;;) {\n    if (indexStack[0] >= nodeStack[0].length) {\n      if (nodeStack.length === 1) {\n        return result;\n      }\n      // Otherwise, remove the current array from the stack.\n      nodeStack.shift();\n      indexStack.shift();\n      // Loop back to the start to continue with the next array.\n      continue;\n    }\n    var elem = nodeStack[0][indexStack[0]++];\n    if ((0, domhandler_1.isTag)(elem) && test(elem)) result.push(elem);\n    if ((0, domhandler_1.hasChildren)(elem) && elem.children.length > 0) {\n      indexStack.unshift(0);\n      nodeStack.unshift(elem.children);\n    }\n  }\n}","map":{"version":3,"names":["exports","filter","find","findOneChild","findOne","existsOne","findAll","domhandler_1","require","test","node","recurse","limit","Infinity","Array","isArray","nodes","result","nodeStack","indexStack","length","shift","elem","push","hasChildren","children","unshift","searchedNodes","i","isTag","found","some"],"sources":["https://raw.githubusercontent.com/fb55/domutils/0ab8bcf1ecfc70dfc93291a4cb2496578ac25e9c/src/querying.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}