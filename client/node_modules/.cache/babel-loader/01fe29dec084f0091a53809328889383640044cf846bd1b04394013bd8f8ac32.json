{"ast":null,"code":"// import React, { useState } from 'react';\n// import { useNavigate, Link } from 'react-router-dom';\n// import './Login.css';\n\n// const Login = ({ setUsername, setAdminUsername, role = 'user' }) => {\n//   const navigate = useNavigate();\n//   const [formData, setFormData] = useState({ email: '', password: '' });\n//   const [message, setMessage] = useState('');\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [showForm, setShowForm] = useState(true); // State to control form visibility\n\n//   // Determine API endpoint & redirect path based on role\n//   const apiEndpoint = role === 'admin' ? 'http://localhost:5000/admin/login' : 'http://localhost:5000/login';\n//   const redirectPath = role === 'admin' ? '/admin' : '/';\n\n//   const handleChange = (e) => {\n//     setFormData({ ...formData, [e.target.name]: e.target.value });\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     setIsLoading(true);\n\n//     try {\n//       const response = await fetch(apiEndpoint, {\n//         method: 'POST',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify(formData),\n//       });\n\n//       const data = await response.json();\n//       console.log(\"Login Response:\", data); // Debugging: Check what backend returns\n\n//       if (response.ok) {\n//         const storageKey = role === 'admin' ? 'adminToken' : 'token';\n//         const usernameKey = role === 'admin' ? 'adminUsername' : 'username';\n\n//         localStorage.setItem(storageKey, data.token);\n//         localStorage.setItem(usernameKey, data.username);\n//         localStorage.setItem('role', data.role); // ✅ Store role in localStorage!\n\n//         if (role === 'admin') {\n//           setAdminUsername(data.username);\n//         } else {\n//           setUsername(data.username);\n//         }\n\n//         setMessage(`${role.charAt(0).toUpperCase() + role.slice(1)} login successful! Redirecting...`);\n\n//         setTimeout(() => {\n//           navigate(redirectPath);\n//           window.location.reload(); // Refresh UI\n//         }, 1500);\n//       } else {\n//         setMessage(data.message || 'Invalid credentials. Try again.');\n//       }\n//     } catch (error) {\n//       setMessage('Server error. Please try again later.');\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n\n//   const handleCloseForm = () => {\n//     setShowForm(false); // Close the form when the button is clicked\n//   };\n\n//   return (\n//     <>\n//       {showForm && (\n//         <div className=\"login-form-container\">\n//           <button className=\"close-btn\" onClick={handleCloseForm}>\n//             &times; {/* Cross symbol for close */}\n//           </button>\n//           <h2>{role === 'admin' ? 'Admin Login' : 'User Login'}</h2>\n//           <form onSubmit={handleSubmit} className=\"login-form\">\n//             <div className=\"input-group\">\n//               <input\n//                 type=\"email\"\n//                 name=\"email\"\n//                 placeholder={`${role === 'admin' ? 'Admin Email' : 'Email'}`}\n//                 value={formData.email}\n//                 onChange={handleChange}\n//                 required\n//               />\n//             </div>\n//             <div className=\"input-group\">\n//               <input\n//                 type=\"password\"\n//                 name=\"password\"\n//                 placeholder={`${role === 'admin' ? 'Admin Password' : 'Password'}`}\n//                 value={formData.password}\n//                 onChange={handleChange}\n//                 required\n//               />\n//             </div>\n//             <button type=\"submit\" className=\"submit-btn\" disabled={isLoading}>\n//               {isLoading ? 'Logging in...' : 'Login'}\n//             </button>\n//           </form>\n//           {message && <p className={message.includes('success') ? 'success' : 'error'}>{message}</p>}\n//           {role === 'user' ? (\n//             <p>Don't have an account? <Link to=\"/register\">Sign Up</Link></p>\n//           ) : (\n//             <p>Not an admin? <Link to=\"/login\">User Login</Link></p>\n//           )}\n//         </div>\n//       )}\n//     </>\n//   );\n// };\n\n// export default Login;","map":{"version":3,"names":[],"sources":["C:/Users/vaish/OneDrive/Desktop/Notes_world/educational-website/client/src/components/Login.js"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import { useNavigate, Link } from 'react-router-dom';\r\n// import './Login.css';\r\n\r\n// const Login = ({ setUsername, setAdminUsername, role = 'user' }) => {\r\n//   const navigate = useNavigate();\r\n//   const [formData, setFormData] = useState({ email: '', password: '' });\r\n//   const [message, setMessage] = useState('');\r\n//   const [isLoading, setIsLoading] = useState(false);\r\n//   const [showForm, setShowForm] = useState(true); // State to control form visibility\r\n\r\n//   // Determine API endpoint & redirect path based on role\r\n//   const apiEndpoint = role === 'admin' ? 'http://localhost:5000/admin/login' : 'http://localhost:5000/login';\r\n//   const redirectPath = role === 'admin' ? '/admin' : '/';\r\n\r\n//   const handleChange = (e) => {\r\n//     setFormData({ ...formData, [e.target.name]: e.target.value });\r\n//   };\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     setIsLoading(true);\r\n\r\n//     try {\r\n//       const response = await fetch(apiEndpoint, {\r\n//         method: 'POST',\r\n//         headers: { 'Content-Type': 'application/json' },\r\n//         body: JSON.stringify(formData),\r\n//       });\r\n\r\n//       const data = await response.json();\r\n//       console.log(\"Login Response:\", data); // Debugging: Check what backend returns\r\n\r\n//       if (response.ok) {\r\n//         const storageKey = role === 'admin' ? 'adminToken' : 'token';\r\n//         const usernameKey = role === 'admin' ? 'adminUsername' : 'username';\r\n\r\n//         localStorage.setItem(storageKey, data.token);\r\n//         localStorage.setItem(usernameKey, data.username);\r\n//         localStorage.setItem('role', data.role); // ✅ Store role in localStorage!\r\n\r\n//         if (role === 'admin') {\r\n//           setAdminUsername(data.username);\r\n//         } else {\r\n//           setUsername(data.username);\r\n//         }\r\n\r\n//         setMessage(`${role.charAt(0).toUpperCase() + role.slice(1)} login successful! Redirecting...`);\r\n\r\n//         setTimeout(() => {\r\n//           navigate(redirectPath);\r\n//           window.location.reload(); // Refresh UI\r\n//         }, 1500);\r\n//       } else {\r\n//         setMessage(data.message || 'Invalid credentials. Try again.');\r\n//       }\r\n//     } catch (error) {\r\n//       setMessage('Server error. Please try again later.');\r\n//     } finally {\r\n//       setIsLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   const handleCloseForm = () => {\r\n//     setShowForm(false); // Close the form when the button is clicked\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       {showForm && (\r\n//         <div className=\"login-form-container\">\r\n//           <button className=\"close-btn\" onClick={handleCloseForm}>\r\n//             &times; {/* Cross symbol for close */}\r\n//           </button>\r\n//           <h2>{role === 'admin' ? 'Admin Login' : 'User Login'}</h2>\r\n//           <form onSubmit={handleSubmit} className=\"login-form\">\r\n//             <div className=\"input-group\">\r\n//               <input\r\n//                 type=\"email\"\r\n//                 name=\"email\"\r\n//                 placeholder={`${role === 'admin' ? 'Admin Email' : 'Email'}`}\r\n//                 value={formData.email}\r\n//                 onChange={handleChange}\r\n//                 required\r\n//               />\r\n//             </div>\r\n//             <div className=\"input-group\">\r\n//               <input\r\n//                 type=\"password\"\r\n//                 name=\"password\"\r\n//                 placeholder={`${role === 'admin' ? 'Admin Password' : 'Password'}`}\r\n//                 value={formData.password}\r\n//                 onChange={handleChange}\r\n//                 required\r\n//               />\r\n//             </div>\r\n//             <button type=\"submit\" className=\"submit-btn\" disabled={isLoading}>\r\n//               {isLoading ? 'Logging in...' : 'Login'}\r\n//             </button>\r\n//           </form>\r\n//           {message && <p className={message.includes('success') ? 'success' : 'error'}>{message}</p>}\r\n//           {role === 'user' ? (\r\n//             <p>Don't have an account? <Link to=\"/register\">Sign Up</Link></p>\r\n//           ) : (\r\n//             <p>Not an admin? <Link to=\"/login\">User Login</Link></p>\r\n//           )}\r\n//         </div>\r\n//       )}\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default Login;\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}