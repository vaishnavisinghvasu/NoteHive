{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import { BrowserRouter as Router, Routes, Route, useLocation, Navigate } from \"react-router-dom\";\n// import Dashboard1 from \"./components/Dashboard1\";\n// import Home from \"./components/Home\";\n// import About from \"./components/About\";\n// import Notes from \"./components/Notes\";\n// import Profile from \"./components/Profile\";\n// import Login from \"./components/Login\";\n// import Register from \"./components/Register\";\n// import ProfileCreation from \"./components/ProfileCreation\";\n// import NoteDetails from \"./components/NoteDetails\";\n// import FAQ from \"./components/FAQ\";\n// import AdminPanel from \"./components/AdminPanel\";\n\n// // Import Admin Components\n// import AdminDashboard from \"./components/admin/AdminDashboard\";\n// import ManageNotes from \"./components/admin/ManageNotes\";\n// import AddNote from \"./components/admin/AddNote\";\n// import EditNote from \"./components/admin/EditNote\";\n\n// // Import ProtectedRoute\n// import ProtectedRoute from \"./components/ProtectedRoute\";\n// import AdminProtectedRoute from \"./components/AdminProtectedRoute\";\n\n// const App = () => {\n//   const [username, setUsername] = useState(localStorage.getItem(\"username\") || null);\n//   const [isAdmin, setIsAdmin] = useState(localStorage.getItem(\"isAdmin\") === \"true\");\n//   const [notes, setNotes] = useState(JSON.parse(localStorage.getItem(\"notes\")) || []);\n\n//   const PrivateRoute = ({ children }) => {\n//     const role = localStorage.getItem(\"role\");\n//     return role === \"admin\" ? children : <Navigate to=\"/\" />;\n//   };\n\n//   useEffect(() => {\n//     const handleStorageChange = () => {\n//       setUsername(localStorage.getItem(\"username\") || null);\n//       setIsAdmin(localStorage.getItem(\"isAdmin\") === \"true\");\n//     };\n\n//     window.addEventListener(\"storage\", handleStorageChange);\n//     return () => window.removeEventListener(\"storage\", handleStorageChange);\n//   }, []);\n\n//   const addNote = (newNote) => {\n//     const updatedNotes = [...notes, newNote];\n//     setNotes(updatedNotes);\n//     localStorage.setItem(\"notes\", JSON.stringify(updatedNotes));\n//   };\n\n//   const deleteNote = (id) => {\n//     const updatedNotes = notes.filter((note) => note.id !== id);\n//     setNotes(updatedNotes);\n//     localStorage.setItem(\"notes\", JSON.stringify(updatedNotes));\n//   };\n\n//   return (\n//     <Router>\n//       <AppRoutes\n//         username={username}\n//         setUsername={setUsername}\n//         isAdmin={isAdmin}\n//         notes={notes}\n//         setNotes={setNotes}\n//         addNote={addNote}\n//         deleteNote={deleteNote}\n//       />\n//     </Router>\n//   );\n// };\n\n// const AppRoutes = ({ username, setUsername, isAdmin, notes, setNotes, addNote, deleteNote }) => {\n//   const location = useLocation(); // ✅ Get the current route\n\n//   return (\n//     <>\n//       <Routes>\n//         {/* Public Routes */}\n//         <Route path=\"/\" element={<Dashboard1 username={username} setUsername={setUsername} />}>\n//           <Route index element={<Home />} />\n//           <Route path=\"about\" element={<About />} />\n//           <Route path=\"notes\" element={<Notes notes={notes} />} />\n//           <Route path=\"notes/:noteId\" element={<NoteDetails notes={notes} />} />\n//           <Route path=\"login\" element={<Login setUsername={setUsername} />} />\n//           <Route path=\"register\" element={<Register setUsername={setUsername} />} />\n//         </Route>\n//         <Route\n//           path=\"/admin\"\n//           element={\n//             <PrivateRoute>\n//               <AdminPanel />\n//             </PrivateRoute>\n//           }\n//         />\n\n//         {/* Protected Routes (Requires Login) */}\n//         <Route element={<ProtectedRoute username={username} />}>\n//           <Route path=\"profile\" element={<Profile />} />\n//           <Route path=\"create-profile\" element={<ProfileCreation />} />\n//         </Route>\n\n//         {/* Admin Routes (Requires Admin Access) */}\n//         <Route element={<AdminProtectedRoute isAdmin={isAdmin} />}>\n//           <Route path=\"/admin\" element={<AdminDashboard />} />\n//           <Route path=\"/admin/manage-notes\" element={<ManageNotes notes={notes} deleteNote={deleteNote} />} />\n//           <Route path=\"/admin/add-note\" element={<AddNote addNote={addNote} />} />\n//           <Route path=\"/admin/edit-note/:noteId\" element={<EditNote notes={notes} setNotes={setNotes} />} />\n//         </Route>\n\n//         {/* Redirect unknown routes */}\n//         <Route path=\"*\" element={<Navigate to=\"/\" />} />\n//       </Routes>\n\n//       {/* Show FAQ only on the Home page */}\n//       {location.pathname === \"/\" && <FAQ />}\n//     </>\n//   );\n// };\n\n// export default App;","map":{"version":3,"names":[],"sources":["C:/Users/vaish/OneDrive/Desktop/Notes_world/educational-website/client/src/App.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import { BrowserRouter as Router, Routes, Route, useLocation, Navigate } from \"react-router-dom\";\n// import Dashboard1 from \"./components/Dashboard1\";\n// import Home from \"./components/Home\";\n// import About from \"./components/About\";\n// import Notes from \"./components/Notes\";\n// import Profile from \"./components/Profile\";\n// import Login from \"./components/Login\";\n// import Register from \"./components/Register\";\n// import ProfileCreation from \"./components/ProfileCreation\";\n// import NoteDetails from \"./components/NoteDetails\";\n// import FAQ from \"./components/FAQ\";\n// import AdminPanel from \"./components/AdminPanel\";\n\n// // Import Admin Components\n// import AdminDashboard from \"./components/admin/AdminDashboard\";\n// import ManageNotes from \"./components/admin/ManageNotes\";\n// import AddNote from \"./components/admin/AddNote\";\n// import EditNote from \"./components/admin/EditNote\";\n\n// // Import ProtectedRoute\n// import ProtectedRoute from \"./components/ProtectedRoute\";\n// import AdminProtectedRoute from \"./components/AdminProtectedRoute\";\n\n// const App = () => {\n//   const [username, setUsername] = useState(localStorage.getItem(\"username\") || null);\n//   const [isAdmin, setIsAdmin] = useState(localStorage.getItem(\"isAdmin\") === \"true\");\n//   const [notes, setNotes] = useState(JSON.parse(localStorage.getItem(\"notes\")) || []);\n\n//   const PrivateRoute = ({ children }) => {\n//     const role = localStorage.getItem(\"role\");\n//     return role === \"admin\" ? children : <Navigate to=\"/\" />;\n//   };\n\n//   useEffect(() => {\n//     const handleStorageChange = () => {\n//       setUsername(localStorage.getItem(\"username\") || null);\n//       setIsAdmin(localStorage.getItem(\"isAdmin\") === \"true\");\n//     };\n\n//     window.addEventListener(\"storage\", handleStorageChange);\n//     return () => window.removeEventListener(\"storage\", handleStorageChange);\n//   }, []);\n\n//   const addNote = (newNote) => {\n//     const updatedNotes = [...notes, newNote];\n//     setNotes(updatedNotes);\n//     localStorage.setItem(\"notes\", JSON.stringify(updatedNotes));\n//   };\n\n//   const deleteNote = (id) => {\n//     const updatedNotes = notes.filter((note) => note.id !== id);\n//     setNotes(updatedNotes);\n//     localStorage.setItem(\"notes\", JSON.stringify(updatedNotes));\n//   };\n\n//   return (\n//     <Router>\n//       <AppRoutes\n//         username={username}\n//         setUsername={setUsername}\n//         isAdmin={isAdmin}\n//         notes={notes}\n//         setNotes={setNotes}\n//         addNote={addNote}\n//         deleteNote={deleteNote}\n//       />\n//     </Router>\n//   );\n// };\n\n// const AppRoutes = ({ username, setUsername, isAdmin, notes, setNotes, addNote, deleteNote }) => {\n//   const location = useLocation(); // ✅ Get the current route\n\n//   return (\n//     <>\n//       <Routes>\n//         {/* Public Routes */}\n//         <Route path=\"/\" element={<Dashboard1 username={username} setUsername={setUsername} />}>\n//           <Route index element={<Home />} />\n//           <Route path=\"about\" element={<About />} />\n//           <Route path=\"notes\" element={<Notes notes={notes} />} />\n//           <Route path=\"notes/:noteId\" element={<NoteDetails notes={notes} />} />\n//           <Route path=\"login\" element={<Login setUsername={setUsername} />} />\n//           <Route path=\"register\" element={<Register setUsername={setUsername} />} />\n//         </Route>\n//         <Route\n//           path=\"/admin\"\n//           element={\n//             <PrivateRoute>\n//               <AdminPanel />\n//             </PrivateRoute>\n//           }\n//         />\n\n//         {/* Protected Routes (Requires Login) */}\n//         <Route element={<ProtectedRoute username={username} />}>\n//           <Route path=\"profile\" element={<Profile />} />\n//           <Route path=\"create-profile\" element={<ProfileCreation />} />\n//         </Route>\n\n//         {/* Admin Routes (Requires Admin Access) */}\n//         <Route element={<AdminProtectedRoute isAdmin={isAdmin} />}>\n//           <Route path=\"/admin\" element={<AdminDashboard />} />\n//           <Route path=\"/admin/manage-notes\" element={<ManageNotes notes={notes} deleteNote={deleteNote} />} />\n//           <Route path=\"/admin/add-note\" element={<AddNote addNote={addNote} />} />\n//           <Route path=\"/admin/edit-note/:noteId\" element={<EditNote notes={notes} setNotes={setNotes} />} />\n//         </Route>\n\n\n//         {/* Redirect unknown routes */}\n//         <Route path=\"*\" element={<Navigate to=\"/\" />} />\n//       </Routes>\n\n//       {/* Show FAQ only on the Home page */}\n//       {location.pathname === \"/\" && <FAQ />}\n//     </>\n//   );\n// };\n\n// export default App;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}