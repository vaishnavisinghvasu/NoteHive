{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vaish\\\\OneDrive\\\\Desktop\\\\Notes_world\\\\educational-website\\\\client\\\\src\\\\components\\\\NoteManager.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import ReactQuill from \"react-quill\"; // Importing Quill editor\n// import { useNavigate } from \"react-router-dom\";\n// import \"react-quill/dist/quill.snow.css\"; // Import Quill's CSS\n// import './NoteManager.css'; // Importing the CSS file\n\n// const NoteManager = () => {\n//   const navigate = useNavigate();\n//   const [notes, setNotes] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [note, setNote] = useState({ title: \"\", content: \"\" });\n//   const [editingNoteId, setEditingNoteId] = useState(null);\n\n//   // Fetch notes from localStorage\n//   useEffect(() => {\n//     const storedNotes = JSON.parse(localStorage.getItem(\"notes\")) || [];\n//     setNotes(storedNotes);\n//     setLoading(false);\n//   }, []);\n\n//   const modules = {\n//     toolbar: [\n//       [{ header: \"1\" }, { header: \"2\" }, { font: [] }],\n//       [{ list: \"ordered\" }, { list: \"bullet\" }],\n//       [\"bold\", \"italic\", \"underline\"],\n//       [{ align: [] }],\n//       [{ color: [] }, { background: [] }],\n//       [\"link\"],\n//       [\"blockquote\", \"code-block\"],\n//       [\"clean\"],\n//     ],\n//   };\n\n//   const saveNote = () => {\n//     const updatedNotes = [...notes];\n//     const newNote = { ...note, id: Date.now() };\n\n//     // Clean content by removing unwanted <p> tags\n//     const cleanedContent = note.content.replace(/<p>/g, '').replace(/<\\/p>/g, '');\n//     newNote.content = cleanedContent;\n\n//     if (editingNoteId) {\n//       const index = notes.findIndex((n) => n.id === editingNoteId);\n//       updatedNotes[index] = newNote;\n//     } else {\n//       updatedNotes.unshift(newNote); // Prepend the newly created note\n//     }\n\n//     // Save updated notes in localStorage\n//     localStorage.setItem(\"notes\", JSON.stringify(updatedNotes));\n//     setNotes(updatedNotes);\n\n//     setNote({ title: \"\", content: \"\" });\n//     setEditingNoteId(null);\n//   };\n\n//   const editNote = (note) => {\n//     setEditingNoteId(note.id);\n//     setNote({ title: note.title, content: note.content });\n//   };\n\n//   const deleteNote = (noteId) => {\n//     const updatedNotes = notes.filter((n) => n.id !== noteId);\n//     localStorage.setItem(\"notes\", JSON.stringify(updatedNotes)); // Update localStorage\n//     setNotes(updatedNotes);\n//   };\n\n//   if (loading) return <p>Loading...</p>;\n\n//   return (\n//     <div className=\"note-manager-container\">\n//       <h2>Note Manager</h2>\n\n//       <div className=\"note-editor\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Title\"\n//           value={note.title}\n//           onChange={(e) => setNote({ ...note, title: e.target.value })}\n//           className=\"note-title-input\"\n//         />\n//         <ReactQuill\n//           value={note.content}\n//           onChange={(content) => setNote({ ...note, content })}\n//           modules={modules}\n//           className=\"note-content-quill\"\n//         />\n//         <button onClick={saveNote} className=\"save-button\">\n//           {editingNoteId ? \"Update Note\" : \"Add Note\"}\n//         </button>\n//       </div>\n\n//       <h3>All Notes</h3>\n//       <table className=\"notes-table\">\n//         <thead>\n//           <tr>\n//             <th>Title</th>\n//             <th>Content</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {notes.map((note) => (\n//             <tr key={note.id}>\n//               <td>{note.title}</td>\n//               <td>{note.content}</td>\n//               <td>\n//                 <button onClick={() => editNote(note)} className=\"edit-button\">\n//                   Edit\n//                 </button>\n//                 <button\n//                   onClick={() => deleteNote(note.id)}\n//                   className=\"delete-button\"\n//                 >\n//                   Delete\n//                 </button>\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default NoteManager;\nimport React, { useState, useEffect } from \"react\";\nimport ReactQuill from \"react-quill\"; // Importing Quill editor\nimport { useNavigate } from \"react-router-dom\";\nimport \"react-quill/dist/quill.snow.css\"; // Import Quill's CSS\nimport \"./NoteManager.css\"; // Importing the CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteManager = () => {\n  _s();\n  const navigate = useNavigate();\n  const [notes, setNotes] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [note, setNote] = useState({\n    title: \"\",\n    content: \"\"\n  });\n  const [editingNoteId, setEditingNoteId] = useState(null);\n\n  // Fetch notes from localStorage\n  useEffect(() => {\n    const storedNotes = JSON.parse(localStorage.getItem(\"notes\")) || [];\n    setNotes(storedNotes);\n    setLoading(false);\n  }, []);\n  const modules = {\n    toolbar: [[{\n      header: \"1\"\n    }, {\n      header: \"2\"\n    }, {\n      font: []\n    }], [{\n      list: \"ordered\"\n    }, {\n      list: \"bullet\"\n    }], [\"bold\", \"italic\", \"underline\"], [{\n      align: []\n    }], [{\n      color: []\n    }, {\n      background: []\n    }], [\"link\"], [\"blockquote\", \"code-block\"], [\"clean\"]]\n  };\n  const cleanContent = content => {\n    // Remove outer wrapping <p> tags while preserving inline formatting\n    content = content.trim();\n    if (content.startsWith(\"<p>\") && content.endsWith(\"</p>\")) {\n      content = content.slice(3, -4);\n    }\n\n    // Remove unnecessary empty paragraphs and cursor spans\n    return content.replace(/<p><br><\\/p>/g, \"\") // Remove empty <p> tags\n    .replace(/<span class=\"ql-cursor\">.*?<\\/span>/g, \"\") // Remove Quill cursor artifacts\n    .replace(/<\\/p><p>/g, \"<br>\"); // Convert paragraph breaks into line breaks\n  };\n  const saveNote = () => {\n    const updatedNotes = [...notes];\n    const newNote = {\n      ...note,\n      id: Date.now()\n    };\n    newNote.content = cleanContent(note.content);\n    if (editingNoteId) {\n      const index = notes.findIndex(n => n.id === editingNoteId);\n      updatedNotes[index] = newNote;\n    } else {\n      updatedNotes.unshift(newNote); // Prepend the newly created note\n    }\n    localStorage.setItem(\"notes\", JSON.stringify(updatedNotes));\n    setNotes(updatedNotes);\n    setNote({\n      title: \"\",\n      content: \"\"\n    });\n    setEditingNoteId(null);\n  };\n  const editNote = note => {\n    setEditingNoteId(note.id);\n    setNote({\n      title: note.title,\n      content: note.content\n    });\n  };\n  const deleteNote = noteId => {\n    const updatedNotes = notes.filter(n => n.id !== noteId);\n    localStorage.setItem(\"notes\", JSON.stringify(updatedNotes));\n    setNotes(updatedNotes);\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"note-manager-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Note Manager\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"note-editor\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Title\",\n        value: note.title,\n        onChange: e => setNote({\n          ...note,\n          title: e.target.value\n        }),\n        className: \"note-title-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ReactQuill, {\n        value: note.content,\n        onChange: content => setNote({\n          ...note,\n          content\n        }),\n        modules: modules,\n        className: \"note-content-quill\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: saveNote,\n        className: \"save-button\",\n        children: editingNoteId ? \"Update Note\" : \"Add Note\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"All Notes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"notes-table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Content\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Actions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: notes.map(note => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: note.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            dangerouslySetInnerHTML: {\n              __html: note.content\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => editNote(note),\n              className: \"edit-button\",\n              children: \"Edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 245,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => deleteNote(note.id),\n              className: \"delete-button\",\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 15\n          }, this)]\n        }, note.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 208,\n    columnNumber: 5\n  }, this);\n};\n_s(NoteManager, \"0GRmkuGOjEPZOT6YFNDiZ8C0RgY=\", false, function () {\n  return [useNavigate];\n});\n_c = NoteManager;\nexport default NoteManager;\nvar _c;\n$RefreshReg$(_c, \"NoteManager\");","map":{"version":3,"names":["React","useState","useEffect","ReactQuill","useNavigate","jsxDEV","_jsxDEV","NoteManager","_s","navigate","notes","setNotes","loading","setLoading","note","setNote","title","content","editingNoteId","setEditingNoteId","storedNotes","JSON","parse","localStorage","getItem","modules","toolbar","header","font","list","align","color","background","cleanContent","trim","startsWith","endsWith","slice","replace","saveNote","updatedNotes","newNote","id","Date","now","index","findIndex","n","unshift","setItem","stringify","editNote","deleteNote","noteId","filter","children","fileName","_jsxFileName","lineNumber","columnNumber","className","type","placeholder","value","onChange","e","target","onClick","map","dangerouslySetInnerHTML","__html","_c","$RefreshReg$"],"sources":["C:/Users/vaish/OneDrive/Desktop/Notes_world/educational-website/client/src/components/NoteManager.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import ReactQuill from \"react-quill\"; // Importing Quill editor\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import \"react-quill/dist/quill.snow.css\"; // Import Quill's CSS\r\n// import './NoteManager.css'; // Importing the CSS file\r\n\r\n// const NoteManager = () => {\r\n//   const navigate = useNavigate();\r\n//   const [notes, setNotes] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [note, setNote] = useState({ title: \"\", content: \"\" });\r\n//   const [editingNoteId, setEditingNoteId] = useState(null);\r\n\r\n//   // Fetch notes from localStorage\r\n//   useEffect(() => {\r\n//     const storedNotes = JSON.parse(localStorage.getItem(\"notes\")) || [];\r\n//     setNotes(storedNotes);\r\n//     setLoading(false);\r\n//   }, []);\r\n\r\n//   const modules = {\r\n//     toolbar: [\r\n//       [{ header: \"1\" }, { header: \"2\" }, { font: [] }],\r\n//       [{ list: \"ordered\" }, { list: \"bullet\" }],\r\n//       [\"bold\", \"italic\", \"underline\"],\r\n//       [{ align: [] }],\r\n//       [{ color: [] }, { background: [] }],\r\n//       [\"link\"],\r\n//       [\"blockquote\", \"code-block\"],\r\n//       [\"clean\"],\r\n//     ],\r\n//   };\r\n\r\n//   const saveNote = () => {\r\n//     const updatedNotes = [...notes];\r\n//     const newNote = { ...note, id: Date.now() };\r\n\r\n//     // Clean content by removing unwanted <p> tags\r\n//     const cleanedContent = note.content.replace(/<p>/g, '').replace(/<\\/p>/g, '');\r\n//     newNote.content = cleanedContent;\r\n\r\n//     if (editingNoteId) {\r\n//       const index = notes.findIndex((n) => n.id === editingNoteId);\r\n//       updatedNotes[index] = newNote;\r\n//     } else {\r\n//       updatedNotes.unshift(newNote); // Prepend the newly created note\r\n//     }\r\n\r\n//     // Save updated notes in localStorage\r\n//     localStorage.setItem(\"notes\", JSON.stringify(updatedNotes));\r\n//     setNotes(updatedNotes);\r\n\r\n//     setNote({ title: \"\", content: \"\" });\r\n//     setEditingNoteId(null);\r\n//   };\r\n\r\n//   const editNote = (note) => {\r\n//     setEditingNoteId(note.id);\r\n//     setNote({ title: note.title, content: note.content });\r\n//   };\r\n\r\n//   const deleteNote = (noteId) => {\r\n//     const updatedNotes = notes.filter((n) => n.id !== noteId);\r\n//     localStorage.setItem(\"notes\", JSON.stringify(updatedNotes)); // Update localStorage\r\n//     setNotes(updatedNotes);\r\n//   };\r\n\r\n//   if (loading) return <p>Loading...</p>;\r\n\r\n//   return (\r\n//     <div className=\"note-manager-container\">\r\n//       <h2>Note Manager</h2>\r\n\r\n//       <div className=\"note-editor\">\r\n//         <input\r\n//           type=\"text\"\r\n//           placeholder=\"Title\"\r\n//           value={note.title}\r\n//           onChange={(e) => setNote({ ...note, title: e.target.value })}\r\n//           className=\"note-title-input\"\r\n//         />\r\n//         <ReactQuill\r\n//           value={note.content}\r\n//           onChange={(content) => setNote({ ...note, content })}\r\n//           modules={modules}\r\n//           className=\"note-content-quill\"\r\n//         />\r\n//         <button onClick={saveNote} className=\"save-button\">\r\n//           {editingNoteId ? \"Update Note\" : \"Add Note\"}\r\n//         </button>\r\n//       </div>\r\n\r\n//       <h3>All Notes</h3>\r\n//       <table className=\"notes-table\">\r\n//         <thead>\r\n//           <tr>\r\n//             <th>Title</th>\r\n//             <th>Content</th>\r\n//             <th>Actions</th>\r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>\r\n//           {notes.map((note) => (\r\n//             <tr key={note.id}>\r\n//               <td>{note.title}</td>\r\n//               <td>{note.content}</td>\r\n//               <td>\r\n//                 <button onClick={() => editNote(note)} className=\"edit-button\">\r\n//                   Edit\r\n//                 </button>\r\n//                 <button\r\n//                   onClick={() => deleteNote(note.id)}\r\n//                   className=\"delete-button\"\r\n//                 >\r\n//                   Delete\r\n//                 </button>\r\n//               </td>\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default NoteManager;\r\nimport React, { useState, useEffect } from \"react\";\r\nimport ReactQuill from \"react-quill\"; // Importing Quill editor\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport \"react-quill/dist/quill.snow.css\"; // Import Quill's CSS\r\nimport \"./NoteManager.css\"; // Importing the CSS file\r\n\r\nconst NoteManager = () => {\r\n  const navigate = useNavigate();\r\n  const [notes, setNotes] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [note, setNote] = useState({ title: \"\", content: \"\" });\r\n  const [editingNoteId, setEditingNoteId] = useState(null);\r\n\r\n  // Fetch notes from localStorage\r\n  useEffect(() => {\r\n    const storedNotes = JSON.parse(localStorage.getItem(\"notes\")) || [];\r\n    setNotes(storedNotes);\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const modules = {\r\n    toolbar: [\r\n      [{ header: \"1\" }, { header: \"2\" }, { font: [] }],\r\n      [{ list: \"ordered\" }, { list: \"bullet\" }],\r\n      [\"bold\", \"italic\", \"underline\"],\r\n      [{ align: [] }],\r\n      [{ color: [] }, { background: [] }],\r\n      [\"link\"],\r\n      [\"blockquote\", \"code-block\"],\r\n      [\"clean\"],\r\n    ],\r\n  };\r\n\r\n  const cleanContent = (content) => {\r\n    // Remove outer wrapping <p> tags while preserving inline formatting\r\n    content = content.trim();\r\n    if (content.startsWith(\"<p>\") && content.endsWith(\"</p>\")) {\r\n      content = content.slice(3, -4);\r\n    }\r\n    \r\n    // Remove unnecessary empty paragraphs and cursor spans\r\n    return content\r\n      .replace(/<p><br><\\/p>/g, \"\") // Remove empty <p> tags\r\n      .replace(/<span class=\"ql-cursor\">.*?<\\/span>/g, \"\") // Remove Quill cursor artifacts\r\n      .replace(/<\\/p><p>/g, \"<br>\"); // Convert paragraph breaks into line breaks\r\n  };\r\n\r\n  const saveNote = () => {\r\n    const updatedNotes = [...notes];\r\n    const newNote = { ...note, id: Date.now() };\r\n\r\n    newNote.content = cleanContent(note.content);\r\n\r\n    if (editingNoteId) {\r\n      const index = notes.findIndex((n) => n.id === editingNoteId);\r\n      updatedNotes[index] = newNote;\r\n    } else {\r\n      updatedNotes.unshift(newNote); // Prepend the newly created note\r\n    }\r\n\r\n    localStorage.setItem(\"notes\", JSON.stringify(updatedNotes));\r\n    setNotes(updatedNotes);\r\n\r\n    setNote({ title: \"\", content: \"\" });\r\n    setEditingNoteId(null);\r\n  };\r\n\r\n  const editNote = (note) => {\r\n    setEditingNoteId(note.id);\r\n    setNote({ title: note.title, content: note.content });\r\n  };\r\n\r\n  const deleteNote = (noteId) => {\r\n    const updatedNotes = notes.filter((n) => n.id !== noteId);\r\n    localStorage.setItem(\"notes\", JSON.stringify(updatedNotes));\r\n    setNotes(updatedNotes);\r\n  };\r\n\r\n  if (loading) return <p>Loading...</p>;\r\n\r\n  return (\r\n    <div className=\"note-manager-container\">\r\n      <h2>Note Manager</h2>\r\n\r\n      <div className=\"note-editor\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Title\"\r\n          value={note.title}\r\n          onChange={(e) => setNote({ ...note, title: e.target.value })}\r\n          className=\"note-title-input\"\r\n        />\r\n        <ReactQuill\r\n          value={note.content}\r\n          onChange={(content) => setNote({ ...note, content })}\r\n          modules={modules}\r\n          className=\"note-content-quill\"\r\n        />\r\n        <button onClick={saveNote} className=\"save-button\">\r\n          {editingNoteId ? \"Update Note\" : \"Add Note\"}\r\n        </button>\r\n      </div>\r\n\r\n      <h3>All Notes</h3>\r\n      <table className=\"notes-table\">\r\n        <thead>\r\n          <tr>\r\n            <th>Title</th>\r\n            <th>Content</th>\r\n            <th>Actions</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {notes.map((note) => (\r\n            <tr key={note.id}>\r\n              <td>{note.title}</td>\r\n              <td dangerouslySetInnerHTML={{ __html: note.content }}></td>\r\n              <td>\r\n                <button onClick={() => editNote(note)} className=\"edit-button\">\r\n                  Edit\r\n                </button>\r\n                <button\r\n                  onClick={() => deleteNote(note.id)}\r\n                  className=\"delete-button\"\r\n                >\r\n                  Delete\r\n                </button>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NoteManager;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}