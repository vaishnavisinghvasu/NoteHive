{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vaish\\\\OneDrive\\\\Desktop\\\\Notes_world\\\\educational-website\\\\client\\\\src\\\\components\\\\NoteManager.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import ReactQuill from \"react-quill\"; // Importing Quill editor\n// import { useNavigate } from \"react-router-dom\";\n// import \"react-quill/dist/quill.snow.css\"; // Import Quill's CSS\n// import './NoteManager.css'; // Importing the CSS file\n\n// const NoteManager = () => {\n//   const navigate = useNavigate();\n//   const [notes, setNotes] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [note, setNote] = useState({ title: \"\", content: \"\" });\n//   const [editingNoteId, setEditingNoteId] = useState(null);\n\n//   // Fetch notes from localStorage\n//   useEffect(() => {\n//     const storedNotes = JSON.parse(localStorage.getItem(\"notes\")) || [];\n//     setNotes(storedNotes);\n//     setLoading(false);\n//   }, []);\n\n//   const modules = {\n//     toolbar: [\n//       [{ header: \"1\" }, { header: \"2\" }, { font: [] }],\n//       [{ list: \"ordered\" }, { list: \"bullet\" }],\n//       [\"bold\", \"italic\", \"underline\"],\n//       [{ align: [] }],\n//       [{ color: [] }, { background: [] }],\n//       [\"link\"],\n//       [\"blockquote\", \"code-block\"],\n//       [\"clean\"],\n//     ],\n//   };\n\n//   const saveNote = () => {\n//     const updatedNotes = [...notes];\n//     const newNote = { ...note, id: Date.now() };\n\n//     // Clean content by removing unwanted <p> tags\n//     const cleanedContent = note.content.replace(/<p>/g, '').replace(/<\\/p>/g, '');\n//     newNote.content = cleanedContent;\n\n//     if (editingNoteId) {\n//       const index = notes.findIndex((n) => n.id === editingNoteId);\n//       updatedNotes[index] = newNote;\n//     } else {\n//       updatedNotes.unshift(newNote); // Prepend the newly created note\n//     }\n\n//     // Save updated notes in localStorage\n//     localStorage.setItem(\"notes\", JSON.stringify(updatedNotes));\n//     setNotes(updatedNotes);\n\n//     setNote({ title: \"\", content: \"\" });\n//     setEditingNoteId(null);\n//   };\n\n//   const editNote = (note) => {\n//     setEditingNoteId(note.id);\n//     setNote({ title: note.title, content: note.content });\n//   };\n\n//   const deleteNote = (noteId) => {\n//     const updatedNotes = notes.filter((n) => n.id !== noteId);\n//     localStorage.setItem(\"notes\", JSON.stringify(updatedNotes)); // Update localStorage\n//     setNotes(updatedNotes);\n//   };\n\n//   if (loading) return <p>Loading...</p>;\n\n//   return (\n//     <div className=\"note-manager-container\">\n//       <h2>Note Manager</h2>\n\n//       <div className=\"note-editor\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Title\"\n//           value={note.title}\n//           onChange={(e) => setNote({ ...note, title: e.target.value })}\n//           className=\"note-title-input\"\n//         />\n//         <ReactQuill\n//           value={note.content}\n//           onChange={(content) => setNote({ ...note, content })}\n//           modules={modules}\n//           className=\"note-content-quill\"\n//         />\n//         <button onClick={saveNote} className=\"save-button\">\n//           {editingNoteId ? \"Update Note\" : \"Add Note\"}\n//         </button>\n//       </div>\n\n//       <h3>All Notes</h3>\n//       <table className=\"notes-table\">\n//         <thead>\n//           <tr>\n//             <th>Title</th>\n//             <th>Content</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {notes.map((note) => (\n//             <tr key={note.id}>\n//               <td>{note.title}</td>\n//               <td>{note.content}</td>\n//               <td>\n//                 <button onClick={() => editNote(note)} className=\"edit-button\">\n//                   Edit\n//                 </button>\n//                 <button\n//                   onClick={() => deleteNote(note.id)}\n//                   className=\"delete-button\"\n//                 >\n//                   Delete\n//                 </button>\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default NoteManager; \n\nimport React, { useState, useEffect } from \"react\";\nimport { Editor } from \"@tinymce/tinymce-react\"; // Import TinyMCE\nimport { useNavigate } from \"react-router-dom\";\n//import \"tinymce/skins/content/default/content.css\"; // Import default TinyMCE styles\nimport \"../css/NoteManager.css\"; // Import CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteManager = () => {\n  _s();\n  const navigate = useNavigate();\n  const [notes, setNotes] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [note, setNote] = useState({\n    title: \"\",\n    content: \"\"\n  });\n  const [editingNoteId, setEditingNoteId] = useState(null);\n\n  // Fetch notes from localStorage\n  useEffect(() => {\n    const storedNotes = JSON.parse(localStorage.getItem(\"notes\")) || [];\n    setNotes(storedNotes);\n    setLoading(false);\n  }, []);\n  const saveNote = () => {\n    const updatedNotes = [...notes];\n    const newNote = {\n      ...note,\n      id: Date.now()\n    };\n\n    // Ensure content doesn't have unnecessary wrapping <p> tags\n    const cleanedContent = newNote.content.replace(/^<p>/, \"\").replace(/<\\/p>$/, \"\");\n    newNote.content = cleanedContent;\n    console.log(\"Saving content:\", newNote.content);\n    if (editingNoteId) {\n      const index = notes.findIndex(n => n.id === editingNoteId);\n      updatedNotes[index] = newNote;\n    } else {\n      updatedNotes.unshift(newNote);\n    }\n    localStorage.setItem(\"notes\", JSON.stringify(updatedNotes));\n    setNotes(updatedNotes);\n    setNote({\n      title: \"\",\n      content: \"\"\n    });\n    setEditingNoteId(null);\n  };\n  const editNote = note => {\n    setEditingNoteId(note.id);\n    setNote({\n      title: note.title,\n      content: note.content\n    });\n  };\n  const deleteNote = noteId => {\n    const updatedNotes = notes.filter(n => n.id !== noteId);\n    localStorage.setItem(\"notes\", JSON.stringify(updatedNotes));\n    setNotes(updatedNotes);\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"note-manager-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Note Manager\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"note-editor\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Title\",\n        value: note.title,\n        onChange: e => setNote({\n          ...note,\n          title: e.target.value\n        }),\n        className: \"note-title-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Editor, {\n        apiKey: \"qks55it6scopg5ibx5k982jzxunxu1x79rdlzkmx2yapv5bb\" // Use this for the free version\n        ,\n        value: note.content,\n        onEditorChange: content => setNote({\n          ...note,\n          content\n        }),\n        init: {\n          height: 250,\n          menubar: false,\n          plugins: \"lists link image table code\",\n          toolbar: \"undo redo | bold italic underline | bullist numlist | link | code\",\n          content_css: \"https://cdn.jsdelivr.net/npm/tinymce@5/skins/ui/oxide/content.css\" // Load styles\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: saveNote,\n        className: \"save-button\",\n        children: editingNoteId ? \"Update Note\" : \"Add Note\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"All Notes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"notes-table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Content\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Actions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: notes.map(note => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: note.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            dangerouslySetInnerHTML: {\n              __html: note.content\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => editNote(note),\n              className: \"edit-button\",\n              children: \"Edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => deleteNote(note.id),\n              className: \"delete-button\",\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 15\n          }, this)]\n        }, note.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 186,\n    columnNumber: 5\n  }, this);\n};\n_s(NoteManager, \"0GRmkuGOjEPZOT6YFNDiZ8C0RgY=\", false, function () {\n  return [useNavigate];\n});\n_c = NoteManager;\nexport default NoteManager;\nvar _c;\n$RefreshReg$(_c, \"NoteManager\");","map":{"version":3,"names":["React","useState","useEffect","Editor","useNavigate","jsxDEV","_jsxDEV","NoteManager","_s","navigate","notes","setNotes","loading","setLoading","note","setNote","title","content","editingNoteId","setEditingNoteId","storedNotes","JSON","parse","localStorage","getItem","saveNote","updatedNotes","newNote","id","Date","now","cleanedContent","replace","console","log","index","findIndex","n","unshift","setItem","stringify","editNote","deleteNote","noteId","filter","children","fileName","_jsxFileName","lineNumber","columnNumber","className","type","placeholder","value","onChange","e","target","apiKey","onEditorChange","init","height","menubar","plugins","toolbar","content_css","onClick","map","dangerouslySetInnerHTML","__html","_c","$RefreshReg$"],"sources":["C:/Users/vaish/OneDrive/Desktop/Notes_world/educational-website/client/src/components/NoteManager.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import ReactQuill from \"react-quill\"; // Importing Quill editor\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import \"react-quill/dist/quill.snow.css\"; // Import Quill's CSS\r\n// import './NoteManager.css'; // Importing the CSS file\r\n\r\n// const NoteManager = () => {\r\n//   const navigate = useNavigate();\r\n//   const [notes, setNotes] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [note, setNote] = useState({ title: \"\", content: \"\" });\r\n//   const [editingNoteId, setEditingNoteId] = useState(null);\r\n\r\n//   // Fetch notes from localStorage\r\n//   useEffect(() => {\r\n//     const storedNotes = JSON.parse(localStorage.getItem(\"notes\")) || [];\r\n//     setNotes(storedNotes);\r\n//     setLoading(false);\r\n//   }, []);\r\n\r\n//   const modules = {\r\n//     toolbar: [\r\n//       [{ header: \"1\" }, { header: \"2\" }, { font: [] }],\r\n//       [{ list: \"ordered\" }, { list: \"bullet\" }],\r\n//       [\"bold\", \"italic\", \"underline\"],\r\n//       [{ align: [] }],\r\n//       [{ color: [] }, { background: [] }],\r\n//       [\"link\"],\r\n//       [\"blockquote\", \"code-block\"],\r\n//       [\"clean\"],\r\n//     ],\r\n//   };\r\n\r\n//   const saveNote = () => {\r\n//     const updatedNotes = [...notes];\r\n//     const newNote = { ...note, id: Date.now() };\r\n\r\n//     // Clean content by removing unwanted <p> tags\r\n//     const cleanedContent = note.content.replace(/<p>/g, '').replace(/<\\/p>/g, '');\r\n//     newNote.content = cleanedContent;\r\n\r\n//     if (editingNoteId) {\r\n//       const index = notes.findIndex((n) => n.id === editingNoteId);\r\n//       updatedNotes[index] = newNote;\r\n//     } else {\r\n//       updatedNotes.unshift(newNote); // Prepend the newly created note\r\n//     }\r\n\r\n//     // Save updated notes in localStorage\r\n//     localStorage.setItem(\"notes\", JSON.stringify(updatedNotes));\r\n//     setNotes(updatedNotes);\r\n\r\n//     setNote({ title: \"\", content: \"\" });\r\n//     setEditingNoteId(null);\r\n//   };\r\n\r\n//   const editNote = (note) => {\r\n//     setEditingNoteId(note.id);\r\n//     setNote({ title: note.title, content: note.content });\r\n//   };\r\n\r\n//   const deleteNote = (noteId) => {\r\n//     const updatedNotes = notes.filter((n) => n.id !== noteId);\r\n//     localStorage.setItem(\"notes\", JSON.stringify(updatedNotes)); // Update localStorage\r\n//     setNotes(updatedNotes);\r\n//   };\r\n\r\n//   if (loading) return <p>Loading...</p>;\r\n\r\n//   return (\r\n//     <div className=\"note-manager-container\">\r\n//       <h2>Note Manager</h2>\r\n\r\n//       <div className=\"note-editor\">\r\n//         <input\r\n//           type=\"text\"\r\n//           placeholder=\"Title\"\r\n//           value={note.title}\r\n//           onChange={(e) => setNote({ ...note, title: e.target.value })}\r\n//           className=\"note-title-input\"\r\n//         />\r\n//         <ReactQuill\r\n//           value={note.content}\r\n//           onChange={(content) => setNote({ ...note, content })}\r\n//           modules={modules}\r\n//           className=\"note-content-quill\"\r\n//         />\r\n//         <button onClick={saveNote} className=\"save-button\">\r\n//           {editingNoteId ? \"Update Note\" : \"Add Note\"}\r\n//         </button>\r\n//       </div>\r\n\r\n//       <h3>All Notes</h3>\r\n//       <table className=\"notes-table\">\r\n//         <thead>\r\n//           <tr>\r\n//             <th>Title</th>\r\n//             <th>Content</th>\r\n//             <th>Actions</th>\r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>\r\n//           {notes.map((note) => (\r\n//             <tr key={note.id}>\r\n//               <td>{note.title}</td>\r\n//               <td>{note.content}</td>\r\n//               <td>\r\n//                 <button onClick={() => editNote(note)} className=\"edit-button\">\r\n//                   Edit\r\n//                 </button>\r\n//                 <button\r\n//                   onClick={() => deleteNote(note.id)}\r\n//                   className=\"delete-button\"\r\n//                 >\r\n//                   Delete\r\n//                 </button>\r\n//               </td>\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default NoteManager; \r\n\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Editor } from \"@tinymce/tinymce-react\"; // Import TinyMCE\r\nimport { useNavigate } from \"react-router-dom\";\r\n//import \"tinymce/skins/content/default/content.css\"; // Import default TinyMCE styles\r\nimport \"../css/NoteManager.css\"; // Import CSS file\r\n\r\nconst NoteManager = () => {\r\n  const navigate = useNavigate();\r\n  const [notes, setNotes] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [note, setNote] = useState({ title: \"\", content: \"\" });\r\n  const [editingNoteId, setEditingNoteId] = useState(null);\r\n\r\n  // Fetch notes from localStorage\r\n  useEffect(() => {\r\n    const storedNotes = JSON.parse(localStorage.getItem(\"notes\")) || [];\r\n    setNotes(storedNotes);\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const saveNote = () => {\r\n    const updatedNotes = [...notes];\r\n    const newNote = { ...note, id: Date.now() };\r\n\r\n    // Ensure content doesn't have unnecessary wrapping <p> tags\r\n    const cleanedContent = newNote.content.replace(/^<p>/, \"\").replace(/<\\/p>$/, \"\");\r\n    newNote.content = cleanedContent;\r\n    console.log(\"Saving content:\", newNote.content); \r\n\r\n    if (editingNoteId) {\r\n      const index = notes.findIndex((n) => n.id === editingNoteId);\r\n      updatedNotes[index] = newNote;\r\n    } else {\r\n      updatedNotes.unshift(newNote);\r\n    }\r\n\r\n    localStorage.setItem(\"notes\", JSON.stringify(updatedNotes));\r\n    setNotes(updatedNotes);\r\n\r\n    setNote({ title: \"\", content: \"\" });\r\n    setEditingNoteId(null);\r\n  };\r\n\r\n  const editNote = (note) => {\r\n    setEditingNoteId(note.id);\r\n    setNote({ title: note.title, content: note.content });\r\n  };\r\n\r\n  const deleteNote = (noteId) => {\r\n    const updatedNotes = notes.filter((n) => n.id !== noteId);\r\n    localStorage.setItem(\"notes\", JSON.stringify(updatedNotes));\r\n    setNotes(updatedNotes);\r\n  };\r\n\r\n  if (loading) return <p>Loading...</p>;\r\n\r\n  return (\r\n    <div className=\"note-manager-container\">\r\n      <h2>Note Manager</h2>\r\n\r\n      <div className=\"note-editor\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Title\"\r\n          value={note.title}\r\n          onChange={(e) => setNote({ ...note, title: e.target.value })}\r\n          className=\"note-title-input\"\r\n        />\r\n        {/* TinyMCE Editor */}\r\n        <Editor\r\n  apiKey=\"qks55it6scopg5ibx5k982jzxunxu1x79rdlzkmx2yapv5bb\" // Use this for the free version\r\n  value={note.content}\r\n  onEditorChange={(content) => setNote({ ...note, content })}\r\n  init={{\r\n    height: 250,\r\n    menubar: false,\r\n    plugins: \"lists link image table code\",\r\n    toolbar: \"undo redo | bold italic underline | bullist numlist | link | code\",\r\n    content_css: \"https://cdn.jsdelivr.net/npm/tinymce@5/skins/ui/oxide/content.css\", // Load styles\r\n  }}\r\n/>\r\n        <button onClick={saveNote} className=\"save-button\">\r\n          {editingNoteId ? \"Update Note\" : \"Add Note\"}\r\n        </button>\r\n      </div>\r\n\r\n      <h3>All Notes</h3>\r\n      <table className=\"notes-table\">\r\n        <thead>\r\n          <tr>\r\n            <th>Title</th>\r\n            <th>Content</th>\r\n            <th>Actions</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {notes.map((note) => (\r\n            <tr key={note.id}>\r\n              <td>{note.title}</td>\r\n              <td dangerouslySetInnerHTML={{ __html: note.content }}></td>\r\n              <td>\r\n                <button onClick={() => editNote(note)} className=\"edit-button\">\r\n                  Edit\r\n                </button>\r\n                <button\r\n                  onClick={() => deleteNote(note.id)}\r\n                  className=\"delete-button\"\r\n                >\r\n                  Delete\r\n                </button>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NoteManager;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}